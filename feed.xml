<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://wechaty.js.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wechaty.js.org/" rel="alternate" type="text/html" /><updated>2022-03-09T16:12:58+00:00</updated><id>https://wechaty.js.org/feed.xml</id><title type="html">Wechaty</title><subtitle>Conversational RPA SDK for Chatbot Makers</subtitle><entry><title type="html">中国开源超级码力榜权威发布 | Wechaty 创始人排名 TOP 7</title><link href="https://wechaty.js.org/2022/03/03/opensource-win-github-ranking-huan-007/" rel="alternate" type="text/html" title="中国开源超级码力榜权威发布 | Wechaty 创始人排名 TOP 7" /><published>2022-03-03T00:00:00+00:00</published><updated>2022-03-03T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/03/03/opensource-win-github-ranking-huan-007</id><content type="html" xml:base="https://wechaty.js.org/2022/03/03/opensource-win-github-ranking-huan-007/"><![CDATA[<p>“开源”是 2021 中国技术发展的年度热词，越来越多人关注开源、贡献开源。然而，谈到中国的开源盛况，却有人提出了不同的观点：</p>

<ul>
  <li>开源布道师李建盛老师（适兕）曾在一次专访中表示 <a href="https://mp.weixin.qq.com/s/YJN7wYX6kk9ZhHkP66zHZA">“真实的开源世界依旧冷清”</a>，鼓励大家“要到开源真正发生的地方里去。”
我们也收到了不少社区开发者的反馈 —— 热闹的背后，究竟有多少来自中国的开发者在贡献代码？如何能帮助在开源社区中贡献代码的开发者们也被更多人认识？</li>
  <li>在和一众开源老友的讨论后，SegmentFault 思否计划联合开源社、腾源会、X-Lab 实验室发起一个全新的、专属于开源开发者的榜单 —— 中国开源码力榜，通过 GitHub 开发者协作影响力进行排名、评选。</li>
</ul>

<p>来自 X-Lab 的 OpenDigger 团队对 GitHub 开放的归档日志进行分析，筛选出了 2021 全年 GitHub 协作影响力排名前 10,000 的账号，并号召了社区中数十位开发者及十余家合作社区，通过开放式协作共同核实标注信息、排除机器人账号，第一阶段甄选出了 99 位中国开发者。</p>

<h2 id="码不停蹄赢">码不停蹄，赢！</h2>

<p><img src="/assets/2022/03-opensource-win-github-ranking-huan-007/winners.webp" alt="Open Source Win" /></p>

<p>他们在为这些项目贡献（排名不分先后）</p>

<blockquote>
  <p>Azure, KubeSphere, Ant Design, Flutter, Hyperf, Swoole, Apache SkyWalking, Apache Airflow, RT-Thread,Apache APISIX, DeepModeling, vant, PyO3, DolphinScheduer, Kubernetes, TiDB, TiKV, Engula, Apache Echarts, OpenResty, PaddlePaddle, Apache Dubbo, MobX, Deepin, Wechaty, TDengine, Apache Camel, ice, AntVis, Apache IoTDB, Aapche EventMesh (Incubating), ClickHouse, Apache InLong (Incubating)</p>
</blockquote>

<ul>
  <li>访问<a href="https://opensource.win/">项目官网</a>了解上榜开发者项目贡献详情</li>
</ul>

<h2 id="wechaty-创始人名列前茅">Wechaty 创始人名列前茅</h2>

<p>Wechaty 创始人 <a href="https://opensource.win/huan">Huan(李卓桓)</a> 排名全球 TOP 450 ，中国 TOP 7 ：</p>

<p><a href="https://opensource.win/huan"><img src="/assets/2022/03-opensource-win-github-ranking-huan-007/opensource-win-huan.webp" alt="Wechaty Huan" /></a></p>

<h2 id="关于中国开源码力榜">关于中国开源码力榜</h2>

<p>中国开源码力榜是由 SegmentFault 思否、开源社、腾源会、X-lab 实验室共同发起的中国开源开发者榜单。</p>

<p>来自 X-lab 的 OpenDigger 团队对 GitHub 开放的归档日志进行分析，筛选出了 2021 全年 GitHub 协作影响力排名前 10,000 的账号，并号召了社区中数十位开发者及十余家合作社区，通过开放式协作共同核实标注信息、排除机器人账号，第一阶段选出了 99 位中国开发者。</p>

<p>榜单发布后，我们收到社区反馈，新增了一位符合标准的来自中国的“开源码丽”Huan (李卓桓)，也请开源世界的每一位开发者通过 Github 项目地址能积极的向我们反馈，我们会不间断的进行更新。</p>

<p>通过中国开源码力榜，我们希望开源世界的超级码丽、开源项目背后的开发者们可以被更多人知道、认识和 respect。让更多人关注开源、关注开源开发者成长。</p>

<ul>
  <li>项目地址：<a href="https://github.com/OpenSourceWin">https://github.com/OpenSourceWin</a></li>
  <li>项目官网：<a href="http://opensource.win/">http://opensource.win/</a></li>
</ul>

<h2 id="评选标准">评选标准</h2>

<ol>
  <li>开发者影响力基于 GitHub 全域开发者活跃数据计算得到。</li>
  <li>影响力计算使用了开发者与项目之间的活动关联与图算法计算获得。</li>
  <li>计算影响力的基本主张为：更有影响力的开发者在 GitHub 上更加活跃、更有影响力的开发者更倾向于参与到更有影响力的项目中、更有影响力的项目会吸引到更多更有影响力的开发者参与。</li>
  <li>第一阶段开源码力榜收录来自中国的协作影响力排名 Top 99 位的开发者，开发者归属地主要依据其 GitHub 上公开的地理位置信息及志愿者手工标注辨别，如有错漏欢迎来 GitHub 向我们反馈。</li>
</ol>

<p>项目地址：<a href="https://github.com/OpenSourceWin">https://github.com/OpenSourceWin</a></p>

<h2 id="合作伙伴">合作伙伴</h2>

<p><img src="/assets/2022/03-opensource-win-github-ranking-huan-007/cover.webp" alt="Open Source Wechaty" /></p>

<p><img src="/assets/2022/03-opensource-win-github-ranking-huan-007/brands.webp" alt="brands" /></p>

<blockquote>
  <p>Source: <a href="https://segmentfault.com/a/1190000041478447">来自开源世界的超级码丽，中国开源码力榜权威发布, SegmentFault思否, Mar 1, 2022</a></p>
</blockquote>]]></content><author><name>huan</name></author><category term="announcement" /><category term="news" /><category term="open-source" /><summary type="html"><![CDATA[“开源”是 2021 中国技术发展的年度热词，越来越多人关注开源、贡献开源。然而，谈到中国的开源盛况，却有人提出了不同的观点：]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/03-opensource-win-github-ranking-huan-007/opensource-super-mario.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/03-opensource-win-github-ranking-huan-007/opensource-super-mario.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Refactoring Friday BOT with NestJS, Domain-driven Design (DDD), and CQRS</title><link href="https://wechaty.js.org/2022/02/27/refactoring-friday-bot-with-nestjs-ddd-cqrs/" rel="alternate" type="text/html" title="Refactoring Friday BOT with NestJS, Domain-driven Design (DDD), and CQRS" /><published>2022-02-27T00:00:00+00:00</published><updated>2022-02-27T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/02/27/refactoring-friday-bot-with-nestjs-ddd-cqrs</id><content type="html" xml:base="https://wechaty.js.org/2022/02/27/refactoring-friday-bot-with-nestjs-ddd-cqrs/"><![CDATA[<p>Friday BOT has been refactored to using <a href="https://nestjs.com/">NestJS</a> framework, by following the <a href="https://medium.com/raa-labs/part-1-domain-driven-design-like-a-pro-f9e78d081f10">Domain-driven Design</a> (DDD) and the <a href="https://www.sderosiaux.com/articles/2019/08/29/cqrs-why-and-all-the-things-to-consider/">Command Query Responsibility Segregation</a> (CQRS) this week, by merging this HUGE(307 files changed) <a href="https://github.com/wechaty/friday/pull/112">Pull Request</a>:</p>

<p><a href="https://github.com/wechaty/friday/pull/112"><img src="/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/friday-pr-112.webp" alt="Friday BOT PR 112" /></a></p>

<h2 id="background">Background</h2>

<p>For a long time, I’m planning to build Wechaty bot with an Event-Driven Architecture (EDA). The first EDA cloud service for Wechaty I have designed is the Wechaty token discovery service 5 years ago, it helps Wechaty instances to discover each other by their token, and make remote calls to each other by JSON-RPC payload, via a center WebSocket server provided by the community.</p>

<p>The most beautiful part of the EDA is that it can decouple the sub-systems, and make the system more flexible and scalable. In the past 5 years, I’ve built a lot of EDA services, like <a href="https://github.com/Chatie/io">@chatie/io server</a> and <a href="https://github.com/wechaty/wechaty/blob/main/src/io.ts">wechaty/io-client</a>, I’ve learned a lot of things from them.</p>

<p>Besides the EDA, we are doing our best to make the Wechaty API to be concise and easy to be understand and use, by using the most intuitive names for all the APIs. We built a plugin layer based on the basic APIs, and the plugin layer successfully helps the Wechaty to be more flexible and scalable.</p>

<h2 id="the-friday-bot">The Friday BOT</h2>

<p><a href="https://github.com/wechaty/friday">Friday BOT</a> is a Wechaty bot, which is in charge of help us to manage the community. It has lots of features, for example, the most basic features are automatically accept new friend requests, sending them a welcome message, and sending them a invitation to join the community chat room.</p>

<p>Some of more advanced features are:</p>

<ol>
  <li>Forward messages across the 20+ different chat rooms on multiple Instant Messaging (IM) platforms, current includes 10+ WeChat groups, one <a href="https://gitter.im/wechaty/wechaty">Gitter channel</a>, one QQ group, one WhatsApp group, with 3600+ developers.</li>
  <li>Recognize the message with different languages like English and Chinese, and forward the message to the right chat room.</li>
  <li>Help the <a href="https://bot5.ml">BOT5 Club</a> to organize the seminar and meetup, in the WeChat room, with the power of the <a href="https://github.com/wechaty/bot5-assistant">bot5-assistant</a> plugin.</li>
  <li>Answer the FAQ in the chat room, with the power of the Azure Congnitive Service <a href="https://github.com/wechaty/plugin-qnamaker">QnAMaker plugin</a>.</li>
  <li>Update the <a href="https://chatie.statuspage.io/">chatie statuspage</a> to record the the community status.</li>
  <li>Provide a <a href="https://github.com/wechaty/vorpal-contrib#4-mathmaster">Math Master Game</a> powered by the <a href="https://github.com/wechaty/vorpal">Wechaty Vorpal pugin</a></li>
  <li>Connect the Freshdesk &amp; Intercom tickets to the Wechaty, with the power of the <a href="https://github.com/wechaty/plugin-freshdesk">Freshdesk plugin</a> and <a href="https://github.com/wechaty/plugin-intercom">Intercom plugin</a>.</li>
  <li>Provide a <a href="https://github.com/gcaufy/wechaty-voteout">Voting to Kickout plugin</a> to kickout the bad guys in the community, by counting the thumb-down votes from the community.</li>
  <li>and more …</li>
</ol>

<p>With Friday BOT get more and more features, the code base is growing, and the community is growing.</p>

<h2 id="domain-driven-design-ddd">Domain-driven Design (DDD)</h2>

<p><img src="/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/domain-driven-design-easily-explained.webp" alt="Domain-driven Design easily explained" /></p>

<blockquote>
  <p>Image source: <a href="https://www.knowis.com/blog/domain-driven-design-structured-modeling-of-complex-software-systems-in-banking">DOMAIN-DRIVEN DESIGN: STRUCTURED MODELING OF COMPLEX SOFTWARE SYSTEMS IN BANKING</a></p>
</blockquote>

<p>Domain Driven Design (DDD) is about mapping business domain concepts into software artifacts.</p>

<blockquote>
  <p>— <a href="https://www.infoq.com/articles/ddd-in-practice/">InfoQ</a></p>
</blockquote>

<p>In my understanding, the soul of DDD is a bridge to connect the business people with the software engineers, and make sure they are in the same page and talking about the same things, efficiently.</p>

<p>Some useful resources:</p>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice">Design a DDD-oriented microservice</a></li>
  <li><a href="https://github.com/ddd-crew/ddd-starter-modelling-process">Domain-Driven Design Starter Modelling Process</a></li>
  <li><a href="https://khalilstemmler.com/articles/enterprise-typescript-nodejs/application-layer-use-cases/">Better Software Design with Application Layer Use Cases</a></li>
  <li><a href="http://galudisu.info/2018/12/21/pattern/ddd/event-sourcing-feedback/">关于Akka在事件溯源的若干思考</a></li>
</ul>

<h2 id="event-storming">Event Storming</h2>

<p><img src="/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/event-storming.webp" alt="Event-storming" /></p>

<blockquote>
  <p>Source: <a href="https://virtualddd.com/learning-ddd/ddd-crew-eventstorming-glossary-cheat-sheet">EventStorming Glossary &amp; Cheat sheet</a></p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Event_storming">Event Storming</a> is a sprint workshop for a group of both business and engineer people who, together, to analyze the business domain by drawning events flows.</p>

<h2 id="command-query-responsibility-segregation-cqrs">Command Query Responsibility Segregation (CQRS)</h2>

<p><img src="/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/cqrs.webp" alt="CQRS" /></p>

<blockquote>
  <p>Source: <a href="https://smartlabsblog.wordpress.com/2015/09/06/introduction-to-cqrs-and-event-sourcing-part-1/">Introduction to CQRS and Event Sourcing</a></p>
</blockquote>

<p><a href="https://martinfowler.com/bliki/CQRS.html">Command Query Responsibility Segregation (CQRS)</a> is a software architecture pattern that separates the command(write) and query(read) layers.</p>

<h2 id="nestjs">NestJS</h2>

<p><img src="/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/nestjs.webp" alt="NestJS" /></p>

<blockquote>
  <p>Nest (<a href="https://nestjs.com/">NestJS</a>) is a framework for building efficient, scalable Node.js server-side applications. It uses progressive TypeScript and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming).</p>

  <p>Nest provides an out-of-the-box application architecture which allows developers and teams to create highly testable, scalable, loosely coupled, and easily maintainable applications. The architecture is heavily inspired by Angular.</p>
</blockquote>

<p>It has <a href="https://docs.nestjs.com/controllers">Controlers</a> to handle the HTTP requests, <a href="https://docs.nestjs.com/providers">Providers</a> to be injected as dependency (Inversify of Control, IOC), and <a href="https://docs.nestjs.com/recipes/cqrs">CQRS</a> which works out-of-the-box.</p>

<h2 id="the-new-architecture-of-friday-bot">The New Architecture of Friday BOT</h2>

<p>With Friday BOT version 1.13+ and the new architecture, we have modulized the system into a few modules, and we have a lot of features to support the new architecture.</p>

<h3 id="ddd-perspective">DDD Perspective</h3>

<ol>
  <li>Repository: provide the <code class="language-plaintext highlighter-rouge">WeChat</code>, <code class="language-plaintext highlighter-rouge">WhatsApp</code>, <code class="language-plaintext highlighter-rouge">QQ</code>, <code class="language-plaintext highlighter-rouge">Gitter</code>, <code class="language-plaintext highlighter-rouge">OfficialAccount</code>, and <code class="language-plaintext highlighter-rouge">WXWork</code> Wechaty instances.</li>
  <li>Model/AggregateRoot: each Wechaty instance is treated as a model/aggregate root.</li>
  <li>Commands &amp; Queries &amp; Events: they are defined to support the business logic, and they are the core of the system.</li>
</ol>

<h4 id="domain-saga-event-to-command">Domain Saga: Event to Command</h4>

<pre><code class="language-mermaid">graph LR
  classDef event fill:DarkGoldenRod
  classDef command fill:blue
  classDef query fill:green

  ME(PuppetMessageReceivedEvent):::event
  GTE[fab:fa-gitter GitterCommunityMessageReceivedEvent]:::event
  WCE[fab:fa-weixin WeChatCommunityMessageReceivedEvent]:::event
  WAE[fab:fa-whatsapp WhatsAppCommunityMessageReceivedEvent]:::event
  QQE[fab:fa-qq QQCommunityMessageReceivedEvent]:::event

  WAC[fab:fa-whatsapp WhatsAppCommunitySendMessageCommand]:::command
  QQC[fab:fa-qq QQCommunitySendMessageCommand]:::command
  WCC[fab:fa-weixin WeChatCommunitySendMessageCommand]:::command
  GTC[fab:fa-gitter GitterCommunitySendMessageCommand]:::command

  S{Saga}
  GTS{fab:fa-gitter}
  WCS{fab:fa-weixin}
  WAS{fab:fa-whatsapp}
  QQS{fab:fa-qq}

  ME==&gt;S

  subgraph Events Saga
    S--&gt;GTE
    S--&gt;WCE
    S--&gt;QQE
    S--&gt;WAE
  end

  subgraph Commands Saga
    GTE--&gt;GTS
    GTS--&gt;WAC
    GTS--&gt;QQC
    GTS--&gt;WCC
    
    WCE--&gt;WCS
    WCS--&gt;WAC
    WCS--&gt;QQC
    WCS--&gt;GTC
    
    WAE--&gt;WAS
    WAS--&gt;GTC
    WAS--&gt;QQC
    WAS--&gt;WCC

    QQE--&gt;QQS
    QQS--&gt;WAC
    QQS--&gt;GTC
    QQS--&gt;WCC
  end
</code></pre>

<h4 id="text-message">Text Message</h4>

<pre><code class="language-mermaid">graph LR
  subgraph Community Send Message Command Saga
    classDef event fill:DarkGoldenRod
    classDef command fill:blue
    classDef query fill:green

    CSC[CommunitySendTextMessageCommand]:::command
    SMC_S[fa:fa-signature SendMessageCommand Signature + Text]:::command
    
    TNQ[GetTalkerNameQuery]:::query
    CNQ[GetChannelNameQuery]:::query

    CSC--&gt;CNQ &amp; TNQ
    CNQ &amp; TNQ --&gt; SMC_S
  end
</code></pre>

<h4 id="non-text-message">Non-text Message</h4>

<pre><code class="language-mermaid">graph LR
  subgraph Community Send Message Command Saga
    classDef event fill:DarkGoldenRod
    classDef command fill:blue
    classDef query fill:green

    CSC[CommunitySendMessageCommand]:::command
    SMC_S[fa:fa-signature SendMessageCommand Signature]:::command
    SMC_N[fa:fa-photo-film SendMessageCommand Non-text]:::command
    
    TNQ[GetTalkerNameQuery]:::query
    CNQ[GetChannelNameQuery]:::query

    CSC--&gt;CNQ &amp; TNQ
    CNQ &amp; TNQ --&gt; SMC_S
    CSC--&gt;SMC_N
  end
</code></pre>

<h4 id="application--domain">Application &amp; Domain</h4>

<pre><code class="language-mermaid">sequenceDiagram
    participant User
    participant Application
    participant Domain
    User-&gt;&gt;Application: original message
    Application-&gt;&gt;Domain: PuppetMessageReceivedEvent
    Domain-&gt;&gt;Domain: XXXCommunityMessageReceivedEvent
    Domain-&gt;&gt;Domain: XXXCommunitySendMessageCommand
    Domain-&gt;&gt;Application: XXXQuery
    Application-&gt;&gt;Domain: 
    Domain-&gt;&gt;Application: PuppetSendMessageCommand
    Application-&gt;&gt;User: forwarded message
</code></pre>

<h3 id="nestjs-perspective">NestJS Perspective</h3>

<p><img src="/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/ioc.webp" alt="Dependency Injection" /></p>

<blockquote>
  <p><a href="https://devopedia.org/dependency-injection">Devopedia. 2022. “Dependency Injection.” Version 5, February 15. Accessed 2022-02-15.</a></p>
</blockquote>

<ol>
  <li>Controller: The controller is the entry point of the HTTP sub-system.</li>
  <li>Application: 3rd party APIs.</li>
  <li>Core: business logics, such as <code class="language-plaintext highlighter-rouge">statuspage</code> and <code class="language-plaintext highlighter-rouge">sync-community-rooms</code></li>
  <li>Infrastructure: low-level supporting services, such as <code class="language-plaintext highlighter-rouge">EnvVar</code>, <code class="language-plaintext highlighter-rouge">finis</code>, etc.</li>
  <li>WechatyEvents: the Event-driven architecture of Wechaty, such as <code class="language-plaintext highlighter-rouge">PuppetMessageReceivedEvent</code>, <code class="language-plaintext highlighter-rouge">PuppetMessageSentEvent</code>, etc.</li>
  <li>WechatyRepository: provide the Wechaty instances.</li>
  <li>WechatySettings: provide the settings from pre-defined properties and environment variables.</li>
  <li>FridayModule: main module of Friday BOT, where the whole system is assembled.</li>
  <li>Sagas: using RxJS to convert <code class="language-plaintext highlighter-rouge">Event</code> to <code class="language-plaintext highlighter-rouge">Command</code>s</li>
  <li>Unit test: using <code class="language-plaintext highlighter-rouge">marble</code> to test the event streaming system</li>
</ol>

<p>All the above modules are in the <code class="language-plaintext highlighter-rouge">src/</code> folder, they are working under the Inverse of Control (IOC) pattern powered by NestJS.</p>

<h2 id="to-do-list">To-do List</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Design the <a href="https://github.com/wechaty/cqrs">CQRS system for Wechaty</a>, and publish it as <a href="https://npmjs.com/package/wechaty-cqrs">wechaty-cqrs</a> NPM module.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Finish the Event-Driven Architecture (EDA) module for Wechaty, and publish it as <code class="language-plaintext highlighter-rouge">wechaty-actor</code> NPM module.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Publish a NestJS module <code class="language-plaintext highlighter-rouge">wechaty-nest</code> for easily integrating the <code class="language-plaintext highlighter-rouge">wechaty-actor</code> NPM module to NestJS</li>
</ul>

<h2 id="source-code">Source Code</h2>

<p>The source code of Friday BOT is available on <a href="https://github.com/wechaty/friday">GitHub</a></p>

<p>You can <a href="https://gitter.im/wechaty/wechaty">join our Gitter</a> network if you aren’t already a member.</p>]]></content><author><name>huan</name></author><category term="announcement" /><category term="news" /><category term="ddd" /><category term="cqrs" /><category term="friday" /><category term="nestjs" /><summary type="html"><![CDATA[Friday BOT has been refactored to using NestJS framework, by following the Domain-driven Design (DDD) and the Command Query Responsibility Segregation (CQRS) this week, by merging this HUGE(307 files changed) Pull Request:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/event-storming-people.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/02-refactoring-friday-bot-with-nestjs-ddd-cqrs/event-storming-people.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2022寒假-王天睿-JuziBot项目开发-期中报告-智能信息助理</title><link href="https://wechaty.js.org/2022/02/17/second-intern-juzibot-report/" rel="alternate" type="text/html" title="2022寒假-王天睿-JuziBot项目开发-期中报告-智能信息助理" /><published>2022-02-17T00:00:00+00:00</published><updated>2022-02-17T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/02/17/second-intern-juzibot-report</id><content type="html" xml:base="https://wechaty.js.org/2022/02/17/second-intern-juzibot-report/"><![CDATA[<h2 id="期中报告">期中报告</h2>

<h3 id="项目参与人">项目参与人</h3>

<ul>
  <li>导师：段清华</li>
  <li>学生：王天睿</li>
</ul>

<h3 id="项目计划">项目计划</h3>

<ol>
  <li>01/13-01/17 : 成功运行dingdong bot，运行juzibot 初步了解juzibot 模块 并学习nodejs</li>
  <li>01/18-01/25 : 开始根据现有功能书写测试用例，同时深入了解juzibot对应模块功能</li>
  <li>01/26-02/11 : 现有功能的完善与测试用例的持续编写</li>
  <li>02/12-02/22 : 抓取的微信问答信息，并完成数据清洗</li>
  <li>02/23-02/27 : 开发句子秒回对应问答机器人,完成微信问答的api接入句子秒回</li>
</ol>

<h3 id="项目进度">项目进度</h3>

<ul>
  <li>测试模块编写
    <ul>
      <li>文字向量服务 ✅</li>
      <li>语音转文字服务 ✅</li>
      <li>标签功能测试 ✅</li>
      <li>意图测试  ✅</li>
      <li>删除测试  ✅</li>
      <li>文件测试  ✅</li>
      <li>文件删除测试  ✅</li>
      <li>关键字测试 ✅</li>
      <li>我的文件测试 ✅</li>
      <li>重启测试 ✅</li>
    </ul>
  </li>
  <li>小橘子🍊接口编写
    <ul>
      <li>利用 SentenceTransformers 编写 句子-&gt;向量 API 替换 CPM ✅</li>
      <li>测试框架 并完成编写 语音-&gt;文字 服务 API ✅</li>
      <li>编写上述 API 测试代码并完成 docker 封装 ✅</li>
    </ul>
  </li>
  <li>数据爬取
    <ul>
      <li>微信广告帮助中心 ✅</li>
      <li>腾讯广告帮助中心 ✅</li>
      <li>企业微信帮助中心 ✅</li>
    </ul>
  </li>
</ul>

<h4 id="相关链接">相关链接</h4>

<ul>
  <li><a href="https://github.com/deepdialog/easy_asr">自动语音识别</a></li>
  <li><a href="https://github.com/deepdialog/easy_sts">句子转向量</a></li>
  <li><a href="https://github.com/tianrking/dont_ban_me/tree/master/app/1%E5%BE%AE%E4%BF%A1%E5%B9%BF%E5%91%8A%E5%B8%AE%E5%8A%A9%E4%B8%AD%E5%BF%83/awesome_version">微信广告数据</a></li>
  <li><a href="https://github.com/tianrking/dont_ban_me/tree/master/app/2%E8%85%BE%E8%AE%AF%E5%B9%BF%E5%91%8A%E5%B8%AE%E5%8A%A9%E4%B8%AD%E5%BF%83">腾讯广告数据</a></li>
  <li><a href="https://github.com/tianrking/dont_ban_me/tree/master/app/3%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%B8%AE%E5%8A%A9%E4%B8%AD%E5%BF%83/awesome_way">企业微信数据</a></li>
</ul>

<h3 id="遇到的问题及解决方案">遇到的问题及解决方案</h3>

<h4 id="使用不熟悉的nodejs语言完成任务">使用不熟悉的nodejs语言完成任务</h4>

<ul>
  <li>遇到问题首先去积极的查阅资料，再进行多种尝试，然后询问老师，同时在解决问题后记录问题， 在此过程中学会并实现了相关编写，也提高了规范代码的意识，感谢老师的耐心帮助。</li>
</ul>

<h4 id="xiaojuzi-与-fastapi-交互">xiaojuzi 与 fastapi 交互</h4>

<ul>
  <li>
    <p>怎样将 wechaty 接收到的 文字/图片/语音 与 fastapi 进行交互 ， 确保它的传输高效，可以恢复。我去尝试构建请求，又没有较好的接受工具用以确定是否发送了理想的数据。所以我不得不先从 fastapi 端编写开始, 通过多次尝试编写如下</p>

    <p>python3</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Item_audio</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
      <span class="n">lol</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="n">audio_name</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="n">audio_data</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    
  <span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">"/api/audio/"</span><span class="p">)</span>
  <span class="k">async</span> <span class="k">def</span> <span class="nf">create_item</span><span class="p">(</span><span class="n">item</span><span class="p">:</span> <span class="n">Item_audio</span><span class="p">):</span>
   
  <span class="n">gg</span><span class="o">=</span><span class="n">item</span><span class="p">.</span><span class="n">audio_data</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"data:audio/silk;base64,"</span><span class="p">,</span><span class="s">""</span><span class="p">)</span>
  <span class="n">audio_data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">gg</span><span class="p">))</span>
    
</code></pre></div>    </div>

    <p>nodejs</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">audioFileBox</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">toFileBox</span><span class="p">()</span>
      <span class="kd">const</span> <span class="nx">audio_dir</span> <span class="o">=</span> <span class="nx">audioFileBox</span><span class="p">.</span><span class="nx">name</span>
      <span class="k">await</span> <span class="nx">audioFileBox</span><span class="p">.</span><span class="nx">toFile</span><span class="p">(</span><span class="nx">audioFileBox</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
      <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">audio_name</span><span class="p">:</span> <span class="nx">audioFileBox</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
          <span class="na">audio_data</span><span class="p">:</span> <span class="dl">"</span><span class="s2">data:audio/silk;base64,</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">audio_dir</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">};</span>
      <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/api/audio/</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">body</span><span class="p">),</span>
          <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">headers</span><span class="p">:</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> <span class="p">}</span>
      <span class="p">});</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="编写一个透明的dockerfile-的小技巧">编写一个”透明”的Dockerfile 的小技巧</h4>

<ul>
  <li>
    <p>编写 sts和asr api时候因为程序运行初次需要下载模型, 难以做到开箱即用，使用 COPY命令在dockerhub上显示一个不明文件移入 不够透明 容易给其他人使用造成困惑， 最后利用shell内的方式来实现</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  RUN <span class="o">(</span><span class="nb">echo</span> <span class="s2">"py code“） | python3 
</span></code></pre></div>    </div>
  </li>
</ul>

<h4 id="编写爬虫的过程">编写爬虫的过程</h4>

<ul>
  <li>
    <p>在编写xiaojuzi的语音转文字模块时候，学会了 nodejs 下 fetch的使用， 也对 post/get 请求有了一定认识， 编写爬虫的时候 因为界面是由javascript渲染得到的无法之间request网址，也就无法完成解析。</p>
  </li>
  <li>
    <p>起初我想用webscrapy插件抓取  但是效率很低 也不方便在没有GUI的vps上操作 还需要人点击显然不是理想的解决方案</p>
  </li>
  <li>
    <p>查阅资料后我决定选用 selenium 框架来渲染网页 然后使用 beautifulsoup lxml 进行爬取和解析 虽然可以通过 “–headless” 方式 在vps上 运行 但是为了确保 selenium 可以完整加载完一个界面 我需要每次都加上进五秒等待时间 这样就会导致爬取时间过长 而且本身我并不知道需要具体的抓取那些url</p>

    <p>selenium 配置</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
  <span class="kn">from</span> <span class="nn">selenium.webdriver.chrome.options</span> <span class="kn">import</span> <span class="n">Options</span>

  <span class="n">options</span> <span class="o">=</span> <span class="n">Options</span><span class="p">()</span>
  <span class="n">options</span><span class="p">.</span><span class="n">headless</span> <span class="o">=</span> <span class="bp">True</span>
  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--window-size=1920x1080"</span><span class="p">)</span>
  <span class="c1"># options.add_argument("window-size=1920x3000");
</span>  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--disable-notifications"</span><span class="p">)</span>

  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--headless'</span><span class="p">)</span>
  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--disable-gpu'</span><span class="p">)</span><span class="c1">#谷歌文档提到需要加上这个属性避免使用gpu产生bug
</span>    
  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'disable-infobars'</span><span class="p">)</span><span class="c1">#隐藏"Chrome正在受到自动软件的控制"
</span>  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'lang=zh_CN.UTF-8'</span><span class="p">)</span>      <span class="c1"># 设置中文
</span>  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'window-size=1920x3000'</span><span class="p">)</span> <span class="c1"># 指定浏览器分辨率
</span>  <span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--hide-scrollbars'</span><span class="p">)</span>     <span class="c1"># 隐藏滚动条, 应对一些特殊页面
</span>
  <span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="n">Chrome</span><span class="p">(</span><span class="s">"/Users/mac/Desktop/chromedriver"</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="n">options</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>抓取 并 初步提取数据</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">driver</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
  <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>
  <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">page_source</span><span class="p">,</span> <span class="s">'lxml'</span><span class="p">)</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'class'</span><span class="p">:</span> <span class="s">'guide__title'</span><span class="p">})):</span>            
      <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'class'</span><span class="p">:</span> <span class="s">'guide__title'</span><span class="p">})))</span>
      <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">","</span><span class="p">)</span>
      <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
      <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
  <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>    </div>

    <p>过程中可能会出现问题,这时候就可以打印 selenium 抓取时候的网页截图</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">driver</span><span class="p">.</span><span class="n">get_screenshot_as_file</span><span class="p">(</span><span class="s">'1.png'</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>不稳定 ， 而且低效</p>
  </li>
  <li>
    <p>爬虫的目的是抓取数据 既然难以渲染得到渲染界面 不如直接从数据请求分析的角度来寻找解决思路 ， 于是就决定尝试抓包寻找解决方案. 首先通过 抓包的到 post 到数据 构造 curl请求 测试是否可以的到正确的响应。</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  curl <span class="s1">'https://open.work.weixin.qq.com/help2/getQusList?lang=zh_CN&amp;ajax=1&amp;f=json&amp;random=310321'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'authority: open.work.weixin.qq.com'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="98", "Microsoft Edge";v="98"'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'accept: application/json, text/plain, */*'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'content-type: application/json'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'sec-ch-ua-mobile: ?0'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36 Edg/98.0.1108.51'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'sec-ch-ua-platform: "macOS"'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'origin: https://open.work.weixin.qq.com'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'sec-fetch-site: same-origin'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'sec-fetch-mode: cors'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'sec-fetch-dest: empty'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'referer: https://open.work.weixin.qq.com/help2/pc/15405?person_id=1'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'accept-language: zh-TW,zh-CN;q=0.9,zh;q=0.8,en;q=0.7,en-GB;q=0.6,en-US;q=0.5,zh-HK;q=0.4'</span> <span class="se">\</span>
      <span class="nt">-H</span> <span class="s1">'cookie: pgv_pvid=3686684000; pac_uid=0_3cbd911c9ce83; pgv_info=ssid=s2798911544; pgv_pvi=4654092288; pgv_si=s6420471808; wwrtx.ref=direct; wwrtx.c_gdpr=0; wwrtx.refid=413075501944711; __utma=114362329.896737070.1644833346.1644833346.1644833346.1; __utmc=114362329; __utmz=114362329.1644833346.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); Hm_lvt_f2ba645ba13636ba52b0234381f51cbc=1644833347; Hm_lpvt_f2ba645ba13636ba52b0234381f51cbc=1644833970; uin=o0508195902; skey=@sEUq3VJWl; RK=hA9xBYtEcN; ptcz=f4917937db9babf5c19203049471a3e4d45ea1fe7b770ef9ea93e47e33c0c0f5; wwrtx.i18n_lan=cht'</span> <span class="se">\</span>
      <span class="nt">--data-raw</span> <span class="s1">'{"person_id":1,"doc_id":15405}'</span> <span class="se">\</span>
      <span class="nt">--compressed</span>
</code></pre></div>    </div>

    <p>这是比较杂乱复杂的，我尝试给它简化 删去对于获取数据而言不必要的部分，的到下面的方法</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">#https://open.work.weixin.qq.com/help2/getQusList?lang=zh_CN&amp;ajax=1&amp;f=json&amp;random=569866 这个是浏览器访问的网址 下面是实际的请求</span>
  curl <span class="s1">'https://open.work.weixin.qq.com/help2/getQusList?lang=zh_CN&amp;ajax=1&amp;f=json&amp;random=310321'</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s1">'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36 Edg/98.0.1108.51'</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s1">'referer: https://open.work.weixin.qq.com/help2/pc/15405?person_id=1'</span> <span class="se">\</span>
  <span class="nt">--data-raw</span> <span class="s1">'{"person_id":1,"doc_id":15405}'</span> 
</code></pre></div>    </div>

    <p>为了确保可靠性， curl复制粘贴非常方便， 在另一台vps上也进行了测试，的确可以的到正确的数据返回，下面就是把它转换成 requests 的请求 融入到代码里。</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  headers <span class="o">=</span> <span class="o">{</span>
  <span class="s1">'user-agent'</span>: <span class="s1">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36 Edg/98.0.1108.51'</span>,
  <span class="s1">'referer'</span>: <span class="s1">'https://open.work.weixin.qq.com/help2/pc/15405?person_id=1'</span>,
  <span class="o">}</span>

  params <span class="o">=</span> <span class="o">(</span>
      <span class="o">(</span><span class="s1">'lang'</span>, <span class="s1">'zh_CN'</span><span class="o">)</span>,
      <span class="o">(</span><span class="s1">'ajax'</span>, <span class="s1">'1'</span><span class="o">)</span>,
      <span class="o">(</span><span class="s1">'f'</span>, <span class="s1">'json'</span><span class="o">)</span>,
      <span class="o">(</span><span class="s1">'random'</span>, <span class="s1">'310321'</span><span class="o">)</span>,
  <span class="o">)</span>

  data <span class="o">=</span> <span class="s1">'{"person_id":1,"doc_id":15405}'</span>
</code></pre></div>    </div>

    <p>此时就可以很清晰的看到请求的结构，大概率可以猜到 要么这个 random 是个假的 random 实际上是做文件索引的， 要么它是个真的random 做防止爬虫检测用，而我们要的对应文档存储就为 doc_id 。 通过脚本测试一下，很快就确定了 doc_id 对应的真的是doc 而random也是真的随机 😂😂😂😂😂 于是 我们可以在最简的基础上再反加回之前的参数 作用是伪装的更真实 防止被ban 得到下边最终构造代码</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">requests</span>
  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'authority'</span><span class="p">:</span> <span class="s">'open.work.weixin.qq.com'</span><span class="p">,</span>
      <span class="s">'sec-ch-ua'</span><span class="p">:</span> <span class="s">'" Not A;Brand";v="99", "Chromium";v="98", "Microsoft Edge";v="98"'</span><span class="p">,</span>
      <span class="s">'accept'</span><span class="p">:</span> <span class="s">'application/json, text/plain, */*'</span><span class="p">,</span>
      <span class="s">'content-type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
      <span class="s">'sec-ch-ua-mobile'</span><span class="p">:</span> <span class="s">'?0'</span><span class="p">,</span>
      <span class="s">'user-agent'</span><span class="p">:</span> <span class="s">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36 Edg/98.0.1108.51'</span><span class="p">,</span>
      <span class="s">'sec-ch-ua-platform'</span><span class="p">:</span> <span class="s">'"macOS"'</span><span class="p">,</span>
      <span class="s">'origin'</span><span class="p">:</span> <span class="s">'https://open.work.weixin.qq.com'</span><span class="p">,</span>
      <span class="s">'sec-fetch-site'</span><span class="p">:</span> <span class="s">'same-origin'</span><span class="p">,</span>
      <span class="s">'sec-fetch-mode'</span><span class="p">:</span> <span class="s">'cors'</span><span class="p">,</span>
      <span class="s">'sec-fetch-dest'</span><span class="p">:</span> <span class="s">'empty'</span><span class="p">,</span>
      <span class="s">'referer'</span><span class="p">:</span> <span class="s">'https://open.work.weixin.qq.com/help2/pc/15405?person_id=1'</span><span class="p">,</span>
      <span class="s">'accept-language'</span><span class="p">:</span> <span class="s">'zh-TW,zh-CN;q=0.9,zh;q=0.8,en;q=0.7,en-GB;q=0.6,en-US;q=0.5,zh-HK;q=0.4'</span><span class="p">,</span>
      <span class="s">'cookie'</span><span class="p">:</span> <span class="s">'pgv_pvid=3686684000; pac_uid=0_3cbd911c9ce83; pgv_info=ssid=s2798911544; pgv_pvi=4654092288; pgv_si=s6420471808; wwrtx.ref=direct; wwrtx.c_gdpr=0; wwrtx.refid=413075501944711; __utma=114362329.896737070.1644833346.1644833346.1644833346.1; __utmc=114362329; __utmz=114362329.1644833346.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); Hm_lvt_f2ba645ba13636ba52b0234381f51cbc=1644833347; Hm_lpvt_f2ba645ba13636ba52b0234381f51cbc=1644833970; uin=o0508195902; skey=@sEUq3VJWl; RK=hA9xBYtEcN; ptcz=f4917937db9babf5c19203049471a3e4d45ea1fe7b770ef9ea93e47e33c0c0f5; wwrtx.i18n_lan=cht'</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="n">params</span> <span class="o">=</span> <span class="p">(</span>
      <span class="p">(</span><span class="s">'lang'</span><span class="p">,</span> <span class="s">'zh_CN'</span><span class="p">),</span>
      <span class="p">(</span><span class="s">'ajax'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">),</span>
      <span class="p">(</span><span class="s">'f'</span><span class="p">,</span> <span class="s">'json'</span><span class="p">),</span>
      <span class="p">(</span><span class="s">'random'</span><span class="p">,</span> <span class="s">'22340'</span><span class="p">),</span>
  <span class="p">)</span>

  <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="p">):</span>
      <span class="c1">## num 编号为主文档对应序号
</span>      <span class="n">data</span> <span class="o">=</span> <span class="s">'{"person_id":1,"doc_id":%s}'</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

      <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">'https://open.work.weixin.qq.com/help2/getQusList'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

</code></pre></div>    </div>

    <p>这样就可以很方便的遍历了，但是 我们不知道到底哪些URL才有我们想要的信息，于是就需要进行暴力遍历， 这时候 python 的异常处理模块变得非常适用 ，我们可以判断 是否返回值正常 若异常直接请求下一个即可， 然后将正确的数据利用pandas直接整理成csv</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">try</span><span class="p">:</span>
          <span class="n">Q</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="s">'data'</span><span class="p">][</span><span class="s">'helpdocument'</span><span class="p">][</span><span class="s">'qusList'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'title'</span><span class="p">]</span>
          <span class="n">A_md</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="s">'data'</span><span class="p">][</span><span class="s">'helpdocument'</span><span class="p">][</span><span class="s">'qusList'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'content_md'</span><span class="p">]</span>
          <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span>
                  <span class="p">[</span><span class="n">Q</span><span class="p">,</span><span class="n">A_md</span><span class="p">]],</span>
                  <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Q'</span><span class="p">,</span><span class="s">'A'</span><span class="p">],</span>
                  <span class="p">)</span>
          <span class="n">df</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">'data_all_in_one/QA_7k.csv'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'a'</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            
      <span class="k">except</span><span class="p">:</span>
          <span class="k">continue</span>
</code></pre></div>    </div>

    <p>此时 基本的部分已经完成， 但是逐个遍历速度还是太慢 于是融入了多线程</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">request_api</span><span class="p">(</span><span class="n">T_name</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="p">):</span>
      <span class="n">xxx</span>
  <span class="k">try</span><span class="p">:</span>
      <span class="n">begin</span> <span class="o">=</span> <span class="mi">13000</span>
      <span class="c1"># 15000-16000 1k  # 16000-17000 2k # 17000-18000 3k # 18000-19000 4k
</span>      <span class="c1"># 19000-20000 5k # 14000-15000 6k $ 13000-14000 7k
</span>      <span class="n">end</span> <span class="o">=</span> <span class="mi">14000</span>
      <span class="nb">sum</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">begin</span>
      <span class="n">step</span> <span class="o">=</span> <span class="mi">4</span>
      <span class="n">time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">sum</span> <span class="o">/</span> <span class="n">step</span><span class="p">)</span>

      <span class="c1">## 这里可以循环 但是没必要 
</span>      <span class="n">_thread</span><span class="p">.</span><span class="n">start_new_thread</span><span class="p">(</span><span class="n">request_api</span><span class="p">,</span> <span class="p">(</span><span class="s">"Thread-1"</span><span class="p">,</span> <span class="mi">0</span><span class="o">+</span><span class="n">begin</span> <span class="p">,</span> <span class="n">begin</span><span class="o">+</span><span class="n">time</span><span class="p">)</span> <span class="p">)</span>
      <span class="n">_thread</span><span class="p">.</span><span class="n">start_new_thread</span><span class="p">(</span><span class="n">request_api</span><span class="p">,</span> <span class="p">(</span><span class="s">"Thread-2"</span><span class="p">,</span> <span class="n">begin</span> <span class="o">+</span> <span class="n">time</span> <span class="p">,</span> <span class="n">begin</span> <span class="o">+</span> <span class="n">time</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span>
      <span class="n">_thread</span><span class="p">.</span><span class="n">start_new_thread</span><span class="p">(</span><span class="n">request_api</span><span class="p">,</span> <span class="p">(</span><span class="s">"Thread-3"</span><span class="p">,</span> <span class="n">begin</span> <span class="o">+</span> <span class="n">time</span><span class="o">*</span><span class="mi">2</span> <span class="p">,</span> <span class="n">begin</span> <span class="o">+</span> <span class="n">time</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span> 
      <span class="n">_thread</span><span class="p">.</span><span class="n">start_new_thread</span><span class="p">(</span><span class="n">request_api</span><span class="p">,</span> <span class="p">(</span><span class="s">"Thread-4"</span><span class="p">,</span> <span class="n">begin</span> <span class="o">+</span> <span class="n">time</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span>  <span class="n">begin</span> <span class="o">+</span> <span class="n">time</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>
  <span class="k">except</span><span class="p">:</span>
      <span class="k">print</span> <span class="p">(</span><span class="s">"Error: 无法启动线程"</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>此时一个多线程的爬虫就实现了 ， 相比 selenium 方法 速度快了数十倍 ，数据干净的多， 而且代码非常简洁 使用时候修改 begin end 就可以啦。 长时间爬取容易被封，所以就没有给它做成全自动的。 爬去完数据 最好检测一下 csv。</p>

    <p>分段爬取并整理成csv后 可以简单的用pandas再次清洗并合并的到最总数据</p>

    <p>另外两个网站爬去的思路也是类似的，不同的是数据初步清洗的过程不一样，有趣的是，微信广告帮助中心 请求后直接下载包含所有信息的json 在浏览器里面访问时候转圈 显示出来后点击抓包 是无法抓取的 因为根本就没有 请求数据的请求 只有统计点击的请求 所有的数据都在加载时候下载完啦 所以只需要</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  url <span class="o">=</span> <span class="s1">'https://ad.weixin.qq.com/openapi/acms_files/get?filename=data'</span>
  rec <span class="o">=</span> requests.get<span class="o">(</span>url<span class="o">)</span>
  f <span class="o">=</span> open<span class="o">(</span><span class="s1">'data_all.txt'</span>,<span class="s1">'w'</span><span class="o">)</span>
  f.write<span class="o">(</span>rec.text<span class="o">)</span>
  f.close<span class="o">()</span>
</code></pre></div>    </div>

    <p>再用 json 提取 和 pandas 清洗就ok了</p>
  </li>
</ul>

<h3 id="视频展示">视频展示</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/TdCtdefyNm4" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="答辩报告">答辩报告</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="/assets/js/viewer-js/#/assets/2022/02-second-intern-juzibot-report/w0x7ce_gg.pdf" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="项目链接">项目链接</h3>

<ul>
  <li>
    <p>项目链接：<a href="https://github.com/deepdialog/xiaojuzi">https://github.com/deepdialog/xiaojuzi</a></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>联系方式：Telegram: @qozob</td>
          <td>Email: me@w0x7ce.eu</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<blockquote>
  <p>Author: <a href="https://github.com/tianrking">@tianrking</a>
Code: <a href="https://github.com/tianrking/xiaojuzi">@tianrking/juzibot</a></p>
</blockquote>]]></content><author><name>tianrking</name></author><category term="article" /><category term="juzibot" /><summary type="html"><![CDATA[期中报告]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/02-second-intern-juzibot-report/cover.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/02-second-intern-juzibot-report/cover.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2022-基于5G平台开发puppet模块接入wechaty</title><link href="https://wechaty.js.org/2022/02/17/wechaty-puppet-walnut-final-report/" rel="alternate" type="text/html" title="2022-基于5G平台开发puppet模块接入wechaty" /><published>2022-02-17T00:00:00+00:00</published><updated>2022-02-17T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/02/17/wechaty-puppet-walnut-final-report</id><content type="html" xml:base="https://wechaty.js.org/2022/02/17/wechaty-puppet-walnut-final-report/"><![CDATA[<h2 id="基于-5g-平台开发-puppet-模块接入-wechaty">基于 5G 平台开发 puppet 模块接入 wechaty</h2>

<ul>
  <li>项目名称：基于5G消息的 Wechaty Puppet 模块的设计与实现</li>
  <li>学生：鲍耀龙</li>
  <li>导师：苏畅</li>
  <li>项目介绍：<a href="https://github.com/juzibot/intern/issues/1">https://github.com/juzibot/intern/issues/1</a></li>
  <li>代码地址：<a href="https://github.com/wechaty/puppet-walnut">https://github.com/wechaty/puppet-walnut</a></li>
</ul>

<h3 id="背景介绍">背景介绍</h3>

<ul>
  <li>Wechaty 社区目前已经支持微信、Whatsapp、企业微信、飞书等常见流行即时通讯工具，并且能够通过多语言 SDK （比如 Python Wechaty） 进行调用。</li>
  <li><a href="https://wechaty.js.org/2021/03/27/rcs-messaging-chatbot/">5G Chatbot (RCS)</a> 是近期中国电信运营商基于 5G 的消息战略落地平台，未来的 5G 手机将会内置 RCS 消息的处理能力。</li>
  <li><a href="https://www.5g-msg.com/#/">硬核桃社区</a> 的 <a href="https://wechaty.js.org/2021/03/27/rcs-messaging-chatbot/">电信运营商商5G Chatbot</a> 平台。</li>
</ul>

<h3 id="目标计划">目标计划</h3>

<ul>
  <li>基于 5G 平台的开放 api 进行封装，实现可以收发消息的机器人 bot。</li>
  <li>丰富机器人的扩展性功能，完善对于 Wechaty 的 api 适配。</li>
</ul>

<h3 id="项目进展">项目进展</h3>

<ul>
  <li>基于 5G 平台的开放 api 进行封装，实现简单的<code class="language-plaintext highlighter-rouge">ding-dong-bot</code>。</li>
  <li>丰富 5G 的消息模式，实现支持富文本、文件、css等多样消息格式的 puppet。</li>
</ul>

<h3 id="需求分析与设计">需求分析与设计</h3>

<h4 id="1-wechaty与puppet的交互">1. <code class="language-plaintext highlighter-rouge">Wechaty</code>与<code class="language-plaintext highlighter-rouge">Puppet</code>的交互</h4>

<p><img src="/assets/2022/02-wechaty-puppet-walnut-final-report/wechatypuppetwalnut.webp" alt="WechatyPuppetWalnut" /></p>

<ul>
  <li>开发者通过<code class="language-plaintext highlighter-rouge">Wechaty</code>提供的 Api 来进行具体的交互操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Wechaty</code>只需要具体调用<strong>开发者指定的<code class="language-plaintext highlighter-rouge">Puppet</code></strong>即此处的<code class="language-plaintext highlighter-rouge">Walnut</code>来实现开发者需要的逻辑。</li>
  <li>我们的<code class="language-plaintext highlighter-rouge">Walnut</code>继承于抽象的<code class="language-plaintext highlighter-rouge">Puppet</code>父类，实现其预定义的抽象方法来实现具体的能力。</li>
  <li>具体的<code class="language-plaintext highlighter-rouge">Walnut</code>会和<code class="language-plaintext highlighter-rouge">5G</code>平台进行数据交互从而实现真正的 ChatBot。</li>
</ul>

<h4 id="2-抽象方法的实现">2. 抽象方法的实现</h4>

<p>在继承了抽象父类之后，我们就可以按照自己需要去实现具体的方法。</p>

<ol>
  <li>
    <p>messageMixin: 消息相关的抽象方法</p>

    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="nx">messageContact</span>      <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageFile</span>         <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">FileBoxInterface</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageImage</span>        <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">imageType</span><span class="p">:</span> <span class="nx">ImageType</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">FileBoxInterface</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageMiniProgram</span>  <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">MiniProgramPayload</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageUrl</span>          <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">UrlLinkPayload</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageLocation</span>     <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">LocationPayload</span><span class="o">&gt;</span>
   
<span class="kd">abstract</span> <span class="nx">messageForward</span>         <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,)</span>                     <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageSendContact</span>     <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                      <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageSendFile</span>        <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">file</span><span class="p">:</span> <span class="nx">FileBoxInterface</span><span class="p">)</span>                 <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageSendMiniProgram</span> <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">miniProgramPayload</span><span class="p">:</span> <span class="nx">MiniProgramPayload</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageSendText</span>        <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">text</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">mentionIdList</span><span class="p">?:</span> <span class="kr">string</span><span class="p">[])</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageSendUrl</span>         <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">urlLinkPayload</span><span class="p">:</span> <span class="nx">UrlLinkPayload</span><span class="p">)</span>         <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">messageSendLocation</span>    <span class="p">(</span><span class="nx">conversationId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">locationPayload</span><span class="p">:</span> <span class="nx">LocationPayload</span><span class="p">)</span>       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span> <span class="o">|</span> <span class="kr">string</span><span class="o">&gt;</span>
   
<span class="kd">abstract</span> <span class="nx">messageRecall</span> <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>contactMixin: 联系人相关的抽象方法</p>

    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="nx">contactSelfName</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>           <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactSelfQRCode</span> <span class="p">()</span>                     <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span> <span class="cm">/* QR Code Value */</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactSelfSignature</span> <span class="p">(</span><span class="nx">signature</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactAlias</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                       <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactAlias</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">alias</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactAvatar</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>                <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">FileBoxInterface</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactAvatar</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">file</span><span class="p">:</span> <span class="nx">FileBoxInterface</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactPhone</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">phoneList</span><span class="p">:</span> <span class="kr">string</span><span class="p">[])</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactCorporationRemark</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">corporationRemark</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactDescription</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactList</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">[]</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactRawPayload</span> <span class="p">(</span><span class="nx">contactId</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span>
<span class="kd">abstract</span> <span class="nx">contactRawPayloadParser</span> <span class="p">(</span><span class="nx">rawPayload</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">ContactPayload</span><span class="o">&gt;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="3-缓存模块">3. 缓存模块</h4>

<ol>
  <li>
    <p>当我们的 sever 监听到有用户发送消息，此时我们就需要去对消息的具体内容做一个缓存。</p>

    <p>这里我们需要自己实现一个缓存模块，将 message 的具体内容存储进去，并且返回 id。</p>

    <blockquote>
      <p>推荐李卓桓老师开发的缓存组件：<strong>flash-store</strong>。 <a href="https://github.com/huan/flash-store">https://github.com/huan/flash-store</a></p>
    </blockquote>
  </li>
  <li>
    <p>然后我们用 Puppet 触发一个 message 事件，把我们本地缓存的 id 传出去。</p>

    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">messageId</span><span class="p">:</span> <span class="nx">messageId</span> <span class="p">})</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>这时候 Wechaty 已经拿到我们消息的 id ，这个时候会根据一个需要我们实现的查询方法来获取本地缓存。</p>

    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">override</span> <span class="k">async</span> <span class="nx">messageRawPayload</span> <span class="p">(</span><span class="nx">messageId</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">WalnutMessagePayload</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">.</span><span class="nx">verbose</span><span class="p">(</span><span class="dl">'</span><span class="s1">PuppetWalnut</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">messageRawPayload(%s)</span><span class="dl">'</span><span class="p">,</span> <span class="nx">messageId</span><span class="p">)</span>
  <span class="c1">// 这里根据 id 去缓存中查出来刚刚存入的消息</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>当查出具体的消息内容后，其实和我们 Wechaty 中预定义的消息结构可能不太一致，需要我们进行一个转换。</p>

    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">override</span> <span class="k">async</span> <span class="nx">messageRawPayloadParser</span> <span class="p">(</span><span class="nx">rawPayload</span><span class="p">:</span> <span class="nx">WalnutMessagePayload</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PUPPET</span><span class="p">.</span><span class="nx">payloads</span><span class="p">.</span><span class="nx">Message</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="c1">// 这里实现转换规则：WalnutMessagePayload ===&gt; PUPPET.payloads.Message</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>不过这里要注意，在每次进行收发消息的时候 Wechaty 都会去加载一遍我们的联系人缓存。
所以对应的联系人缓存的模块也需要实现：</p>

    <ul>
      <li>contactRawPayloa</li>
      <li>contactRawPayloadParser</li>
    </ul>
  </li>
</ol>

<h3 id="项目成果">项目成果</h3>

<h4 id="1-contact-api-支持">1. Contact Api 支持</h4>

<ul>
  <li>
    <h4 id="properties"><a href="https://wechaty.js.org/docs/api/contact#properties">Properties</a></h4>

    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Description</th>
          <th>Support</th>
          <th>Details</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td><code class="language-plaintext highlighter-rouge">string</code></td>
          <td>Get Contact id. This function is depending on the Puppet Implementation, see <a href="https://github.com/wechaty/wechaty/wiki/Puppet#3-puppet-compatible-table">puppet-compatible-table</a></td>
          <td>✅</td>
          <td>Phone number</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <h4 id="instance-methods"><a href="https://wechaty.js.org/docs/api/contact#instance-methods">Instance Methods</a></h4>

    <table>
      <thead>
        <tr>
          <th>Instance Methods</th>
          <th>Return type</th>
          <th>Support</th>
          <th>Details</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>say(text Or Contact Or File)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td>⚠Contact not Support</td>
        </tr>
        <tr>
          <td>name()</td>
          <td><code class="language-plaintext highlighter-rouge">String</code></td>
          <td>✅</td>
          <td>Phone number</td>
        </tr>
        <tr>
          <td>alias(newAlias)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>friend()</td>
          <td><code class="language-plaintext highlighter-rouge">Boolean or null</code></td>
          <td>✅</td>
          <td>True</td>
        </tr>
        <tr>
          <td>type()</td>
          <td><code class="language-plaintext highlighter-rouge">ContactType.Unknown or ContactType.Personal or ContactType.Official</code></td>
          <td>✅</td>
          <td>ContactType.Personal</td>
        </tr>
        <tr>
          <td>gender()</td>
          <td><code class="language-plaintext highlighter-rouge">ContactGender.Unknown or ContactGender.Male or ContactGender.Female</code></td>
          <td>✅</td>
          <td>ContactGender.Unknown</td>
        </tr>
        <tr>
          <td>province()</td>
          <td><code class="language-plaintext highlighter-rouge">String or null</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>city()</td>
          <td><code class="language-plaintext highlighter-rouge">String or null</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>avatar()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td>Default avatar</td>
        </tr>
        <tr>
          <td>sync()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>self()</td>
          <td><code class="language-plaintext highlighter-rouge">Boolean</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>

    <blockquote>
      <p>Default avatar 👉 <a href="https://raw.githubusercontent.com/wechaty/puppet-walnut/main/docs/images/avatar.webp">https://raw.githubusercontent.com/wechaty/puppet-walnut/main/docs/images/avatar.webp</a></p>
    </blockquote>
  </li>
  <li>
    <h4 id="static-methods"><a href="https://wechaty.js.org/docs/api/contact#static-methods">Static Methods</a></h4>

    <table>
      <thead>
        <tr>
          <th>Static Methods</th>
          <th>Return Type</th>
          <th>Support</th>
          <th>Detail</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>find(query)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise &lt;Contact | null&gt;</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>findAll(Query Arguements)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise &lt;Contact []&gt;</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h4 id="2-message-api-支持">2. Message Api 支持</h4>

<ul>
  <li>
    <h4 id="instance-methods-1"><a href="https://wechaty.js.org/docs/api/message#instance-methods">Instance Methods</a></h4>

    <table>
      <thead>
        <tr>
          <th>Instance methods</th>
          <th>Return type</th>
          <th>Support</th>
          <th>Detail</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>from()</td>
          <td><code class="language-plaintext highlighter-rouge">Contact</code> or <code class="language-plaintext highlighter-rouge">null</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>to()</td>
          <td><code class="language-plaintext highlighter-rouge">Contact</code> or <code class="language-plaintext highlighter-rouge">null</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>room()</td>
          <td><code class="language-plaintext highlighter-rouge">Room</code> or <code class="language-plaintext highlighter-rouge">null</code></td>
          <td>✅</td>
          <td>null</td>
        </tr>
        <tr>
          <td>text()</td>
          <td><code class="language-plaintext highlighter-rouge">string</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>say(text Or Contact Or File)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td>⚠Contact not Support</td>
        </tr>
        <tr>
          <td>type()</td>
          <td><code class="language-plaintext highlighter-rouge">MessageType</code></td>
          <td>✅</td>
          <td>Message.Text</td>
        </tr>
        <tr>
          <td>self()</td>
          <td><code class="language-plaintext highlighter-rouge">boolean</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>mention()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>mentionSelf()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>forward(to)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>date()</td>
          <td><code class="language-plaintext highlighter-rouge">Date</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>age()</td>
          <td><code class="language-plaintext highlighter-rouge">Number</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>toFileBox()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>toContact()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>toUrlLink()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <h4 id="static-method"><a href="https://wechaty.js.org/docs/api/message#static-method">Static Method</a></h4>

    <table>
      <thead>
        <tr>
          <th>Static Methods</th>
          <th>Return type</th>
          <th>Support</th>
          <th>Detail</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>find()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>findAll()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h4 id="3-消息格式支持">3. 消息格式支持</h4>

<table>
  <thead>
    <tr>
      <th>消息类型</th>
      <th>从属(根据接口返回)</th>
      <th>获取方式</th>
      <th>接收</th>
      <th>发送</th>
      <th>群聊</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>文本</td>
      <td><code class="language-plaintext highlighter-rouge">text</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.text</code></td>
      <td>✅</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>图片</td>
      <td><code class="language-plaintext highlighter-rouge">image</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.toImage()</code></td>
      <td>✅</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>视频</td>
      <td><code class="language-plaintext highlighter-rouge">video</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.toFilebox()</code></td>
      <td>✅</td>
      <td>❌</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>音频</td>
      <td><code class="language-plaintext highlighter-rouge">audio</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.toFilebox()</code></td>
      <td>✅</td>
      <td>❌</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>位置</td>
      <td><code class="language-plaintext highlighter-rouge">location</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.toLocation()</code></td>
      <td>❌</td>
      <td>❌</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>文件</td>
      <td><code class="language-plaintext highlighter-rouge">other</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.toFilebox()</code></td>
      <td>✅</td>
      <td>❌</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>联系人</td>
      <td><code class="language-plaintext highlighter-rouge">other</code></td>
      <td><code class="language-plaintext highlighter-rouge">message.toContact()</code></td>
      <td>✅</td>
      <td>❌</td>
      <td>❌</td>
    </tr>
  </tbody>
</table>

<h3 id="视频展示">视频展示</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/gqR2Mbouc4E" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="答辩报告">答辩报告</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="/assets/2022/02-wechaty-puppet-walnut-final-report/wechaty-puppet-walnut-final-report" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="未来与展望">未来与展望</h3>

<ul>
  <li>对 walnut 进行细节的补充和完善。</li>
  <li>尽可能增加对其他功能的支持、并且持序维护。</li>
</ul>

<blockquote>
  <p>Author: <a href="https://github.com/fabian4">@fabian</a></p>
</blockquote>]]></content><author><name>fabian</name></author><category term="project" /><category term="5g" /><category term="puppet-walnut" /><category term="chatbot" /><category term="ecosystem" /><category term="plan" /><summary type="html"><![CDATA[基于 5G 平台开发 puppet 模块接入 wechaty]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/02-wechaty-puppet-walnut-final-report/puppet-walnut.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/02-wechaty-puppet-walnut-final-report/puppet-walnut.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基于Wechaty的销售助理机器人–项目结项报告</title><link href="https://wechaty.js.org/2022/02/10/sales-assistant-final/" rel="alternate" type="text/html" title="基于Wechaty的销售助理机器人–项目结项报告" /><published>2022-02-10T00:00:00+00:00</published><updated>2022-02-10T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/02/10/sales-assistant-final</id><content type="html" xml:base="https://wechaty.js.org/2022/02/10/sales-assistant-final/"><![CDATA[<!-- markdownlint-disable MD033 -->

<h2 id="摘要">摘要</h2>

<p>经过两个月的迭代，销售助理机器人逐渐成为一款可用、实用的产品。此報告將梳理項目產出，項目實現、以及過程中碰到值得學習的問題。</p>

<h3 id="影片">影片</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/i45SQ4CrsdE" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="报告">报告</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="/assets/js/viewer-js/#/assets/2022/02-sales-assistant-final/sales-assitant-final-1.pdf" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h2 id="一已实现功能说明">一、已实现功能说明</h2>

<h3 id="總配置流程">總配置流程</h3>

<ol>
  <li>
    <p>【管理者】執行<a href="https://k0auuqcihb.feishu.cn/docs/doccnKLFrlLJ7kcJIZHDdUhhWGx#jTI2lW">【產品準備1】</a>和<a href="https://k0auuqcihb.feishu.cn/docs/doccnKLFrlLJ7kcJIZHDdUhhWGx#yKsQ0A">【產品準備2】</a>，得到【售前售後名單, 企業名稱，警報配置，2個Vika表單的ID】</p>
  </li>
  <li>
    <p>【技術人員】根據【售前售後名單, 企業名稱，警報配置，2個Vika表單的ID】執行<a href="https://k0auuqcihb.feishu.cn/docs/doccnKLFrlLJ7kcJIZHDdUhhWGx#Ry88le">【部署系統】</a>，使系統上線，通知【管理者】，正式運行</p>
  </li>
</ol>

<h3 id="功能模块1-消息警报机器人">功能模块1: 消息警报机器人</h3>

<h4 id="功能描述">功能描述</h4>

<ol>
  <li>机器人在飞书推送不同等级的消息卡片，提醒销售久未回复的群聊，降低销售与管理者降低负担，并提高会话满意度。</li>
  <li>通过JSON文件配置细粒度配置消息卡片、警报周期等参数，并支持销售与售后分别配置。例如：
    <ol>
      <li>超时 5，10分钟推送绿、黄警报至飞书私人群</li>
      <li>超时 20，30，40 分钟推送橙、红、紫警报至飞书私人群与公共群</li>
      <li>超出 40 分钟后，每隔10分钟推送灰色警报，直到超时1000分钟</li>
    </ol>
  </li>
</ol>

<p><img src="/assets/2022/02-sales-assistant-final/1.webp" style="zoom:50%;" /></p>

<h3 id="功能模块2-通过vika表格进行交互式会话与绩效管理">功能模块2: 通过Vika表格进行交互式会话与绩效管理</h3>

<ol>
  <li>实时更新今日活跃群信息</li>
  <li>多阶段群聊管理（售前、售后）</li>
  <li>可展示群聊的回复情况、以及超时回复时长</li>
  <li>可提示未被指派销售的群（容错）</li>
  <li>对于特殊情况，例如客户回复“好”的超时情况，管理员可以取消计时（容错）</li>
  <li>沉淀诸多会话管理指标，方便销售团队复盘</li>
  <li>可通过JSON文件配置更新频率</li>
</ol>

<h4 id="功能模块2-1-群聊总表">功能模块2-1: 群聊总表</h4>

<ol>
  <li>在群聊总表-群聊总表内管理所有群聊的状态
<img src="/assets/2022/02-sales-assistant-final/2-1.webp" alt="2-1" /></li>
  <li>销售交接售后时，将【负责人】改为售后名，将【群聊阶段】改为 after-sales，等待管理员确认
<img src="/assets/2022/02-sales-assistant-final/2-1.2.webp" alt="2-1.2" /></li>
  <li>(每日) 在群聊总表-待核准列表，勾选【核准进入售后阶段】核准群聊</li>
  <li>在群聊总表-<strong>无负责人群聊</strong>列表内，在微信群查看是否没有负责人，并重新指派一个负责人与群聊阶段
<img src="/assets/2022/02-sales-assistant-final/2-1.3.webp" alt="2-1.3" /></li>
</ol>

<h4 id="功能模块2-2-今日群聊">功能模块2-2: 今日群聊</h4>

<ol>
  <li>在今日群聊-总表内，可看到今日活跃群</li>
  <li>对于超时回复的消息，可看到最后一句对话。可查看【最后说话者】、【最后一句话】，视情况勾选【消除未恢复记录】，以取消报警提示</li>
</ol>

<ul>
  <li>例如：看到超时88 分钟的群聊，且客户回复‘好的’，可勾选【消除未恢复记录】</li>
</ul>

<p><img src="/assets/2022/02-sales-assistant-final/2-2.1.webp" alt="2-2.1" /></p>
<ol>
  <li>等待1分钟内，系统将显示【已消除未回覆记录】，超时时间归零，飞书将中断推送该群超时提醒</li>
</ol>

<p><img src="/assets/2022/02-sales-assistant-final/2-2.2.webp" alt="2-2.2" /></p>
<ol>
  <li>可在末尾的参数处，查看该群的各种指标。公式为：总回复数= （售前+售后+顾客+其他员工） 的回复数</li>
</ol>

<p><img src="/assets/2022/02-sales-assistant-final/2-2.3.webp" alt="2-2.3" /></p>

<h3 id="功能模块3-伙伴云可视化">功能模块3: 伙伴云可视化</h3>

<p>从Vika下载生成的数据，从企业微信导入伙伴云，建立可视化图表，对每个销售的当日/当周回覆质量进行可视化。目前需要手动地导入、构建图表，还是需要花费比较多的时间。下一步将会透过API实时显示绩效表单出来。</p>

<p><img src="/assets/2022/02-sales-assistant-final/3-1.webp" alt="image-20220212000332848" /></p>

<p><img src="/assets/2022/02-sales-assistant-final/3-2.webp" alt="image-20220212000104323" /></p>

<h2 id="二实现">二、实现</h2>

<p>我們將系統解構成前端、puppet、後端代碼、以及數據庫。</p>

<p>首先，用戶和銷售每日會有許多新群與新消息，這些消息透過Wechaty捕獲，在<code class="language-plaintext highlighter-rouge">sales-bot.js</code>中統一存入<code class="language-plaintext highlighter-rouge">msg_db</code>，同時進行邏輯判斷，若有新建立的群，則會記錄在<code class="language-plaintext highlighter-rouge">room_db</code>內。</p>

<p>接著，<code class="language-plaintext highlighter-rouge">update-vika.js</code> 會實時抓取群聊數據與消息數據，計算當日所有活躍群的狀態，並即時顯示在Vika表格上。管理者可透過Vika查看所有群聊狀態、找到問題、並執行一些操作。當售前完成任務，透過Vika改變群聊階段與負責人，並交由管理者審核通過。這些對群聊狀態的改變，將由 <code class="language-plaintext highlighter-rouge">vika-update-roomdb.js</code> 檢查是否合法，若合法則更新數據庫，否則會顯示報錯的系統信息。</p>

<p>最後，<code class="language-plaintext highlighter-rouge">vika-to-feishu.js</code> 會實時抓取 vika 的群聊數據，負責將不同程度的超時回覆，轉成不同顏色的警示卡片，透過 Lark Puppet 接入飛書，根據嚴重程度推送到私人群或大群，使銷售與管理者掌握回覆的狀態。</p>

<p>若要改變銷售名單，則由開發者改變 <code class="language-plaintext highlighter-rouge">default.json</code> ，再執行 <code class="language-plaintext highlighter-rouge">update-name.js</code>，即可。若管理者希望改變消息推送的頻率、超時時長與對應的警報，也可以直接修改 <code class="language-plaintext highlighter-rouge">default.json</code> 並重啟系統。此外還有系統的諸多配置，也是從這裡修改。</p>

<p><img src="/assets/2022/02-sales-assistant-final/structure.webp" alt="image-20220212011240626" /></p>

<h3 id="挑戰">挑戰</h3>

<p>重構代碼結構 （非同步讀寫）</p>

<p>從項目結構中不難發現，模塊之間有多種交互。一開始我把所有功能都混在兩份代碼裡，複雜度變得很高，而且難判斷數據是否正確：如果使用者從Vika改動數據，那麼很可能會污染數據庫。所以我嘗試對代碼解耦，依據前端、後端、與數據庫的三個維度拆分各個模塊，最後成為上述的結構。最顯著的優勢是，每份代碼都變得很短。第二個大的優勢是，能看出某段代碼對某類數據，是讀還是寫的關係，這很大地保證了數據的一致性。第三個優勢是，這樣的設計可以為後續的拓展提供明確的指導，例如若我希望增加飛書推送的規則，我可以知道我要寫在哪裡、以及大概怎麼寫。</p>

<h3 id="系統崩潰">系統崩潰</h3>

<p>在使用 wechaty 企業微信版本時，我在調用 API 後時偶爾會碰到這個 Bug，使得系統崩潰。這個問題很致命，因為當系統崩潰後，sales-bot 就無法收集新的群聊與消息，無法維護消息與房間的正確性。在後面的開發中，我在Vika 上顯示每個群聊與消息的狀態，使管理員可以捕捉到所有群聊的狀態，算是解決上述問題以及其他人為疏失所帶來的數據錯誤。但每日負責上千條消息的 sales-bot 若持續產生錯誤數據，必然會造成很大的人工成本，所以肯定需要有方法保證它能在崩潰後盡快上線。</p>

<p><img src="/assets/2022/02-sales-assistant-final/crash.webp" alt="crash" /></p>

<p>首先，我先使用 Js 自己的 error catching 方法來捕捉錯誤消息，並在結束程序前從飛書提醒我。</p>

<p><img src="/assets/2022/02-sales-assistant-final/alert.webp" alt="image-20220211115312363" /></p>

<p>但這還是需要人力來做。一個人不可能隨時看飛書消息，就算看到也不見得能即時重啟。所以接下來我繼續找自動重啟的方法。首先我嘗試使用 forever.js , 但在跑了他的 example 後我短時間沒有試成功。後來我們就嘗試把這份代碼放到 docker 上跑，讓它來自動重啟崩潰的代碼。另外 dockerizing 還帶來了其他的好處，像是提供一個穩定的運行環境，幫助後續的規模化。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile</span>
<span class="k">FROM</span><span class="s"> node:16</span>
<span class="k">WORKDIR</span><span class="s"> /root/bot</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>npm i <span class="nt">--registry</span><span class="o">=</span>https://registry.npmmirror.com
<span class="k">CMD</span><span class="s"> npm start</span>
</code></pre></div></div>

<p>在這段 dockerfile 中，我們先將整個項目文件複製到container中，安裝依賴，再運行。但問題是每次都需要重新安裝 npm 包，這個時間非常長，多可以到 7,8 分鐘。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile</span>
<span class="k">FROM</span><span class="s"> node:16</span>
<span class="k">WORKDIR</span><span class="s"> /root/bot</span>
<span class="k">COPY</span><span class="s"> ./package.json ./package.json</span>
<span class="k">COPY</span><span class="s"> ./package-lock.json ./package-lock.json</span>
<span class="k">RUN </span>npm i <span class="nt">--registry</span><span class="o">=</span>https://registry.npmmirror.com
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">CMD</span><span class="s"> npm start</span>
</code></pre></div></div>

<p>一個解決的技巧是，先將<code class="language-plaintext highlighter-rouge">package.json</code> 與 <code class="language-plaintext highlighter-rouge">package-lock.json</code>搬運過去。若這兩份文件沒有改動，亦即沒有新的依賴，那就不需要重新安裝。但即便如此，當安裝了新依賴時仍然要忍受長時間的安裝。有沒有可能讓 node 只安裝多出來的依賴，而非全部呢？這是很值得思考的問題。</p>

<h2 id="三結果與問題分析">三、結果與問題分析</h2>

<p>經過問卷與訪談，大部分銷售習慣直接從企業微信上回覆，從飛書接入警報只有少部分的時間幫助他們。另外，因為銷售的底層機制是，當客戶發送消息後開始計時，但當碰到客戶回覆「好的」或「OK」的結束語而銷售沒有回覆時，系統將不斷增加超時時間而不斷報警。因此我們增加了「取消超時」功能，讓管理者或銷售在碰到這種情況時關閉計時。</p>

<p>另外，銷售有時處於專注狀態，這時若要求即時回覆，將很大程度影響專注狀態。所以銷售機器人未來需要能根據狀態，來決定是否要計時。5分鐘警報的原意是，希望客戶發送的每句話都可以比較快地有回音，若需要1小時才能回覆的問題，也可以在5分鐘內先回覆這個狀態。但董森認為，回覆客戶「稍等」這類信息的總效益（客戶獲益-銷售成本）不見得是最高的，考慮到銷售時常是滿載的情況。</p>

<p>有趣的是，售前的董森和售後的榮生，他們每日回覆的消息量都遠超過其他的銷售和售後，也恰好在問卷裡反對過頻繁的提醒。</p>

<p>為何需要這麼快速、高效地回覆客戶？在與市場部的張佳、以及銷售總監祥宇討論後，了解到如果沒有即時回覆，很可能客戶就跑了。但這不只是回復快慢的問題，回覆的內容與策略也很重要。銷售需要判斷一個客戶是否比較可能買單，並把他們排在更高的優先級。另外，過了一段時間（例如7天）沒交流的群需重新跟進。可以看出，售前是非常關鍵與技巧性的銷售環節。這次銷售機器人只關注「回覆時長」，算是跑通一個基礎的框架，爲後續更智能的對話管理做鋪墊。</p>

<p>對於管理者而言，這個項目的意義在於解決一個很痛的點：若管理者希望查看某銷售或某群聊的狀態，需要手動翻找群聊信息，花費大量時間，更不用說能統計出績效了。在Vika上展示了所有群聊最關鍵的信息，像是多久沒回覆，對話上下文、總群聊、群聊階段等等，瞬間有一種打開視野的明亮感。另外從HR的角度，這些沈澱下來的數據，也可以作為定目標與績效的標準。</p>

<h2 id="四總結">四、總結</h2>

<p>銷售機器人是我的第一份實習工作。在這三個多月中，我根據一開始管理者給我的問題與產品需求，跑通基礎可用的系統，根據各種衍伸的問題不斷迭代，並更深入地了解銷售場景，最後得到一個可投產的基礎版本。這個經驗實在是非常寶貴，很感謝佳芮在去年10月底介紹我這個機會。在與佳芮交流時，能感受到很強烈對目標與產出的專注，以及對產品、業務、技術問題全面的把握。清華是很棒的mentor和朋友，在和他交流問題時，學到很多對bug的判斷與推理，對事項優先級的排序，以及對工具與方法的選擇。康龍作為一個小CEO給我很多的支持，幫助我的項目方向與佳芮的想法可以一致，讓我能更快解決問題；他和我同鄰，卻能一個人做那麼多事，並做得很成熟。思荷在我剛入職的時候給我許多經驗，讓我避掉了許多坑。和翔宇與佳哥討論銷售場景時，時常能有很深入的交流，收穫非常多。最後，在與銷售們交流產品問題時，時常能得到很豐富的反饋。總體而言，在句子互動看到大家很有熱情、很快速地成長，年輕的管理層驅動大家看到問題並不斷蛻變。同時也覺得創業公司的壓力非常大，時常看到同事很晚才下班。句子的技術團隊，很常遇到未知的突發狀況，然後靠大家神經繃緊一起解決。我覺得技術的team心臟真的要很大顆，因為肩上揹負一個巨大的、不斷運轉的系統。這也讓我看到「職場」與「學校」是多麼的不同。在學校只需要把作業提交即可，在職場需要對客戶、以及整套系統負責。這使我對創業公司的拼勁以及 working ethic 非常尊敬，希望未來可以成長成這樣的角色。</p>]]></content><author><name>kevintung</name></author><category term="project" /><category term="productivity" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/02-sales-assistant-final/sales-meme.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/02-sales-assistant-final/sales-meme.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基于wechaty开发的医疗小助手</title><link href="https://wechaty.js.org/2022/02/02/wechaty-medical-bot/" rel="alternate" type="text/html" title="基于wechaty开发的医疗小助手" /><published>2022-02-02T00:00:00+00:00</published><updated>2022-02-02T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/02/02/wechaty-medical-bot</id><content type="html" xml:base="https://wechaty.js.org/2022/02/02/wechaty-medical-bot/"><![CDATA[<h2 id="1-前言">1. 前言</h2>

<p>随着移动互联网即时通讯工具的发展和普及，人与人之间的交流越来越依赖通讯工具，比如<code class="language-plaintext highlighter-rouge">Wechat</code>成为各种工作场景的重要沟通工具。医疗作为特殊行业，医生与医生、医生与护士以及医生与患者等之间的沟通对疾病诊断、治疗、随访等尤其重要。作为专科医生，多数患者都因某种常见疾病就诊，很多时候沟通内容都是重复的，如何通过机器或程序帮助我们完成重复内容的沟通，从而提高工作效率呢？此外，医疗知识多而繁杂，如何通过机器或程序帮助我们更好记忆呢？</p>

<h2 id="2-住院总医师与临床工作简介">2. 住院总医师与临床工作简介</h2>

<p>笔者为某医院外科医生，爱好编程，大学期间自学python，用于数据自动化处理、病历资料自动化收集、科研统计与作图等，极大提高了笔者的工作效率以及数据的准确性。目前担任<strong>住院总医师</strong>（简称<code class="language-plaintext highlighter-rouge">住院总</code>），相信大家都听过<code class="language-plaintext highlighter-rouge">996</code>工作制度，而住院总工作为期1-2年，每天24小时均在病区，以便随call随到，有些医院可能有1周休息1天。住院总的工作强度，绝对是有过之而无不及。住院总是住院医师培养的高级阶段，是住院医师向主治医师成长过程中必要的阶段。一般住院总负责科室所有事情，包括但不仅限于科室排班，负责进修医生、轮科医师、实习医师的临床轮转安排、出科考试；转达医院的各种文件、指令；各科室普通和急诊会诊，特别是急诊会诊，随call随到；负责病房抢救工作等。另外，外科住院总需参加手术，可能在手术时就错过了重要事情的提醒。其次，进修及轮科医生是定期轮转，每次更换新学员都需重复提醒、指导和教学。那么，这个过程中就会涉及到很多重复、重要的消息提醒、文件转达、临床工作注意事项提示等，如何减轻住院总的工作压力、协助记忆、提高工作效率呢？</p>

<p>于是基于<code class="language-plaintext highlighter-rouge">wechaty</code>开发了一个<strong>医疗小助手</strong>，由于笔者编程能力有限，此文只做简单介绍，具体代码参考<a href="https://github.com/wechaty/wechaty">wechaty官网</a>。</p>

<h2 id="3-医疗小助手目前已实现的功能">3. 医疗小助手目前已实现的功能</h2>

<h3 id="31-个性化提醒用于提醒轮科医生临床工作注意事项">3.1 个性化提醒，用于提醒轮科医生临床工作注意事项</h3>

<p>入院诊断、临床路径录入
<img src="/assets/2022/02-wechaty-medical-bot/new-admission-dignosis.webp" alt="new-admission-dignosis" /></p>

<p>新入院注意事项
<img src="/assets/2022/02-wechaty-medical-bot/new-admission.webp" alt="new-admission" /></p>

<p>病程书写注意事项
<img src="/assets/2022/02-wechaty-medical-bot/soap.webp" alt="soap" /></p>

<p>早查房应关注的项目和内容
<img src="/assets/2022/02-wechaty-medical-bot/pre-wardround.webp" alt="pre-wardround" />
<img src="/assets/2022/02-wechaty-medical-bot/recall.webp" alt="recall" /></p>

<p>换药和操作后医疗垃圾分类
<img src="/assets/2022/02-wechaty-medical-bot/debridement.webp" alt="debridement" /></p>

<p>出院注意事项以及术后复查
<img src="/assets/2022/02-wechaty-medical-bot/discharge.webp" alt="discharge" /></p>

<p>病案提交
<img src="/assets/2022/02-wechaty-medical-bot/file-submit.webp" alt="file-submit" /></p>

<p>周末交接班
<img src="/assets/2022/02-wechaty-medical-bot/weekend.webp" alt="weekend" />
<img src="/assets/2022/02-wechaty-medical-bot/exchange.webp" alt="exchange" /></p>

<h3 id="32-专业知识查询">3.2 专业知识查询</h3>

<p>术后补液原则
<img src="/assets/2022/02-wechaty-medical-bot/fluid.webp" alt="fluid" /></p>

<p>常见镇痛药物
<img src="/assets/2022/02-wechaty-medical-bot/analgesia.webp" alt="analgesia" /></p>

<p>抢救药物
<img src="/assets/2022/02-wechaty-medical-bot/life-saving.webp" alt="life-saving" /></p>

<h3 id="33-其他">3.3 其他</h3>

<p><img src="/assets/2022/02-wechaty-medical-bot/light.webp" alt="light" /></p>

<p><img src="/assets/2022/02-wechaty-medical-bot/post-blood-check.webp" alt="post-blood-check" /></p>

<p><img src="/assets/2022/02-wechaty-medical-bot/tue-note.webp" alt="tue-note" /></p>

<h2 id="4-效果">4. 效果</h2>

<p>虽然医疗小助手目前仅有部分功能，但很大程度缓解了本人住院总工作负担，定期提醒和推送提高了各位医生的自觉性。目前病案规定天数内提交率100%，换药车以及换药室医疗垃圾均按规定分类丢弃等。</p>

<h2 id="5-待开发功能与展望">5. 待开发功能与展望</h2>

<p>限于个人临床工作忙以及编程能力有限，目前医疗小助手功能较少，但自己制定了一些目标，以后开发更多的功能，若有机会后续再跟大家分享，也欢迎大家提宝贵意见(<code class="language-plaintext highlighter-rouge">smartnikocj@gmail.com</code>)。</p>

<p><code class="language-plaintext highlighter-rouge">待开发功能</code>：</p>

<ul>
  <li>轮科医生排班与考勤</li>
  <li>通讯录（每月轮转医生不同，定期更新通讯录，随时查询，方便沟通）</li>
  <li>病案书写注意事项（定期推送病案书写知识点）</li>
  <li>专业知识定期推送（形成知识网络，定期推送，随时查询，让进修及轮科医生学习更多本专业知识）</li>
  <li>常用药物使用注意事项（如定期推送本科常用药物配伍禁忌）</li>
  <li>抢救流程及药物（定期推送，反复学习，当遇到抢救时胸有成竹）</li>
  <li>医患沟通（回答患者常见提问等）</li>
  <li>等等</li>
</ul>

<h2 id="6-致谢">6. 致谢</h2>

<p>感谢<a href="https://wechaty.js.org/">wechaty</a>社区开发者们的辛勤付出，感谢<a href="https://github.com/huan">Huan</a>的宝贵建议。希望本项目可以持续发展下去。</p>]]></content><author><name>smartnikocj</name></author><category term="article" /><category term="assistant" /><category term="wechat" /><category term="medicine" /><category term="improve-efficiency" /><summary type="html"><![CDATA[1. 前言]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/02-wechaty-medical-bot/title-image.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/02-wechaty-medical-bot/title-image.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Authing 团队管理 + Wechaty 机器人 = 无限可能</title><link href="https://wechaty.js.org/2022/01/29/authing-wechaty-intergration/" rel="alternate" type="text/html" title="Authing 团队管理 + Wechaty 机器人 = 无限可能" /><published>2022-01-29T00:00:00+00:00</published><updated>2022-01-29T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/01/29/authing-wechaty-intergration</id><content type="html" xml:base="https://wechaty.js.org/2022/01/29/authing-wechaty-intergration/"><![CDATA[<h2 id="用户故事">用户故事</h2>

<p>其实用 Authing 团队管理 + Wechaty 机器人能够实现很多功能，来提高传统人事管理的效率。甚至还可以做一些数据的分析、统计，来辅助决策。这里我就列了几个简单的现实场景，希望能帮助大家理解。</p>

<h3 id="以-authing-作为上游数据源">以 Authing 作为上游数据源</h3>

<p>同步数据到其他平台，前期为飞书和微信。创建完用户后，用户可以通过手机号直接登录飞书。个人微信添加 Wechaty Bot，通过消息发送手机号进行用户关联绑定。在 Authing 中创建组织架构，同步对应创建飞书的部门和微信的群组。同步删除飞书用户、微信群移除群聊。</p>

<h3 id="原有飞书组织接入微信">原有飞书组织接入微信</h3>

<p>飞书作为上游数据源。微信添加 Wechat Bot，通过消息发送手机号进行用户关联绑定。
在飞书中添加、删除用户，（先设置好同步频率，比如每 10 分钟检查一次），对应微信群中进行邀请加入或者移除。在飞书中进行部门（组织）管理，同步在微信中创建对应的群聊（扁平化，无层级），并同步群成员管理（添加/移除）。</p>

<h3 id="原有微信群组并接入飞书">原有微信群组并接入飞书</h3>

<p>选择一个全员微信群进行接入，首先 Wechaty Bot 会为该群中所有成员创建 Authing 用户。微信添加 Wechaty Bot 或者 @提及的方式发送消息手机号进行用户关联绑定，绑定手机号的成员可以通过该手机号进行飞书的登录。
在原有微信大群中添加、删除用户，（先设置好同步频率，比如每 10 分钟检查一次），对应飞书用户添加或者移除。</p>

<h2 id="撸一个-wechaty-authing-的插件">撸一个 Wechaty Authing 的插件</h2>

<p>也可以通过插件的介绍页面直接去了解插件的使用说明。该插件开源代码仓库位于： <a href="https://github.com/Authing/wechaty-authing">https://github.com/Authing/wechaty-authing</a></p>

<h3 id="设计思路">设计思路</h3>

<ul>
  <li>该插件应当封装好了一些常用的方法，来打通 Wechaty 与 Authing 之间的连接</li>
  <li>配备了一些好用的工具类方法，提高开发效率</li>
  <li>具备一定的可扩展性，方便有一些非通用需求的实现</li>
</ul>

<h3 id="实现">实现</h3>

<p>在着手开发这个插件之前，我是分别以 Wechaty 作为用户上游和 Authing 用户池作为用户上游做了两个 MVP 项目。然后通过项目中的一些方法和功能，来完成这个插件的最初版本。</p>

<p>列举一下 Wechaty 作为用户上游时，需要用到的一些方法：</p>

<ul>
  <li>检查微信好友或群内的用户是否已经存在 Authing 用户池</li>
  <li>检查微信用户是否绑定了 Authing 账号（主要为手机号）</li>
  <li>当邀请、移除群成员时候，对应创建、删除 Authing 用户</li>
</ul>

<p>再列举一下将 Authing 作为用户上游时，需要用到的一些方法：</p>

<ul>
  <li>检查微信的好友申请、以及消息，判断是否为 Authing 用户（通过消息规则手机号校验）</li>
  <li>将微信号与 Authing 用户进行关联绑定 （通过消息规则手机号校验）</li>
</ul>

<p>然后这个过程中，经常会有两个用户列表的比较，一个是 Wechaty <code class="language-plaintext highlighter-rouge">Contact[]</code> 列表，一个是 Authing <code class="language-plaintext highlighter-rouge">User[]</code> 列表，去判断联系人是不是 Authing 用户、判断联系人有没有被邀请入群、或者判断联系人是否需要被移除群聊。</p>

<p>最后代码大概的框架成了这个样子：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">WechatyAuthing</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">config</span><span class="p">:</span> <span class="nx">WechatyAuthingConfig</span><span class="p">);</span>
  <span class="cm">/**
   * Get Authing SDK client
   * 获取 Authing SDK 实例
   */</span>
  <span class="k">protected</span> <span class="kd">get</span> <span class="nx">client</span><span class="p">():</span> <span class="nx">_ManagementClient1</span><span class="p">;</span>
  <span class="cm">/**
   * Get Authing User pool name
   * @returns {Promise&lt;string&gt;}
   */</span>
  <span class="nx">getPoolName</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="cm">/** ********* AS UPSTREAM ************* */</span>
  <span class="cm">/**
   * Batch check users exists from Authing
   * 检查是否注册为 Authing 用户
   * @param {Contact[]} contacts Wechaty Contact[]
   * @returns {ContactsFilterResult} { registered: Contact[]; unregistered: Contact[]; fail: Contact[] }
   */</span>
  <span class="nx">filterAuthingUsers</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="nx">Contact</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="nx">contacts</span><span class="p">:</span> <span class="nx">T</span><span class="p">[]</span>
  <span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">ContactsFilterResult</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;&gt;</span><span class="p">;</span>
  <span class="cm">/**
   * Batch create users to Authing
   * 向 Authing 用户池中批量创建用户
   * @param {Contact[]} contacts Wechaty Contact[]
   * @returns {ContactsOperationResult} {success: Contact[], fail: Contact[]}
   */</span>
  <span class="nx">createAuthingUsers</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="nx">Contact</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="nx">contacts</span><span class="p">:</span> <span class="nx">T</span><span class="p">[]</span>
  <span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">ContactsOperationResult</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;&gt;</span><span class="p">;</span>
  <span class="cm">/**
   * Batch delete users from Authing
   * 从 Authing 用户池中批量删除 Wechaty 用户
   * @param {Contact[]} contacts Wechaty Contact[]
   * @returns {ContactsOperationResult} {success: Contact[], fail: Contact[]}   */</span>
  <span class="nx">deleteAuthingUsers</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="nx">Contact</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="nx">contacts</span><span class="p">:</span> <span class="nx">T</span><span class="p">[]</span>
  <span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">ContactsOperationResult</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;&gt;</span><span class="p">;</span>
  <span class="cm">/**
   * Create or update a authing user with Wechaty contact and phone
   * 绑定 Contact 和手机号码到 Authing 用户（或创建一个用户）
   * @param {Contact} contact
   * @param {string} phone
   * @returns {Promise&lt;boolean&gt;}
   */</span>
  <span class="nx">bindAuthingPhone</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="nx">Contact</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">contact</span><span class="p">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">phone</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="cm">/** ********* AS DOWNSTREAM ************* */</span>
  <span class="cm">/**
   * Check if user with the phone number exists in Authing
   * 检查手机号是否注册为 Authing 用户
   * @param {string} phone
   * @returns {Promise&lt;boolean&gt;}
   */</span>
  <span class="nx">checkPhone</span><span class="p">(</span><span class="nx">phone</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="cm">/**
   * Bind Wechaty contact to a Authing user by phone number
   * 将 Wechaty Contact 绑定到 Authing 手机号的用户
   * @param {string} phone
   * @param {Contact} contact
   * @returns {Promise&lt;boolean&gt;}
   */</span>
  <span class="nx">bindPhoneContact</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="nx">Contact</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">phone</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">contact</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="cm">/** ********* PROTECTED ************* */</span>
  <span class="cm">/**
   * Create Authing user
   * 创建 Authing 用户
   * @param {Contact} contact
   * @returns {User | null}
   */</span>
  <span class="k">protected</span> <span class="nx">createAuthingUser</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="nx">Contact</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">contact</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">User</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>另外，在刚开始 POC 的时候，我使用了大量低效的代码去实现该功能，如：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 筛选出用户中的好友</span>
<span class="kd">const</span> <span class="nx">friends</span> <span class="o">=</span> <span class="nx">allFriends</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">contact</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">~</span><span class="nx">users</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">externalId</span> <span class="o">===</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// 删除成员和提醒不确定状态</span>
<span class="kd">const</span> <span class="nx">members2Delete</span> <span class="o">=</span> <span class="nx">memberList</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">member</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">~</span><span class="nx">deletedUsers</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">externalId</span> <span class="o">===</span> <span class="nx">member</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">);</span>
<span class="kd">const</span> <span class="nx">members2Warning</span> <span class="o">=</span> <span class="nx">memberList</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">member</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="o">!~</span><span class="nx">deletedUsers</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">externalId</span> <span class="o">===</span> <span class="nx">member</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
    <span class="o">!~</span><span class="nx">users</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">externalId</span> <span class="o">===</span> <span class="nx">member</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">);</span>
<span class="c1">// 检查未入群的好友</span>
<span class="kd">const</span> <span class="nx">members2Invite</span> <span class="o">=</span> <span class="nx">friends</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">friend</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">!~</span><span class="nx">memberList</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">member</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">member</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">friend</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>在此基础上，优化了几个工具方法：</p>

<ul>
  <li>通过 Set 特性取两个数组的差集</li>
  <li>获取 Wechaty 用户真实的唯一 ID</li>
</ul>

<p>其实在集成过程中还有很多细节的点需要注意，我会都在文章最后的章节里进行整理。</p>

<h3 id="测试">测试</h3>

<p>目前的代码质量 A，测试覆盖率为 98%。如果你对于这个插件感兴趣，测试用例不仅仅是你参与贡献的最好开始，其实也是插件使用的绝佳案例。</p>

<p>其中也包括了示例初始化、各个方法调用和返回值期待、工具方法的使用，以及扩展开发的一些细节。</p>

<p>以拓展插件的测试用例为例：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//https://github.com/Authing/wechaty-authing/blob/main/test/extends.spec.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">WechatyAuthing</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../src</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">extension</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">client</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nx">ExtendedWechatyAuthing</span> <span class="kd">extends</span> <span class="nx">WechatyAuthing</span> <span class="p">{</span>
      <span class="k">async</span> <span class="nx">totalUsers</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">totalCount</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">list</span><span class="p">();</span>
        <span class="k">return</span> <span class="nx">totalCount</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtendedWechatyAuthing</span><span class="p">({</span>
      <span class="na">userPoolId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTHING_USER_POOL_ID</span><span class="p">,</span>
      <span class="na">secret</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTHING_USER_POOL_SECRET</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">totalUsers</span><span class="p">();</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBeGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>当然，具体的插件使用细节，可以通过项目 README 文件查看，提供了中英文两个版本。</p>

<h2 id="上手做几个机器人吧">上手做几个机器人吧</h2>

<p>示例中（来自 POC 项目）使用的 Wechaty 版本为 <code class="language-plaintext highlighter-rouge">0.75</code> 和 puppty 为 <code class="language-plaintext highlighter-rouge">padlocal</code> （基于 iPad 微信协议）。可以访问示例代码仓库下载： <a href="https://github.com/Authing/wechaty-authing-poc">https://github.com/Authing/wechaty-authing-poc</a></p>

<h3 id="使用微信群作为上游用户数据">使用微信群作为上游用户数据</h3>

<h4 id="管理员邀请用户加入群组人为操作">管理员邀请用户加入群组（人为操作）</h4>

<p>侦听 <code class="language-plaintext highlighter-rouge">room-join</code> 事件触发，获得被邀请人员名单（<em>inviteeList</em>）。检查 Authing 用户池，筛选出未注册的用户列表，批量注册用户，并发送消息提示绑定用户手机号。</p>

<h4 id="管理员踢出群聊用户人为操作">管理员踢出群聊用户（人为操作）</h4>

<p>侦听 <code class="language-plaintext highlighter-rouge">room-leave</code> 事件触发，获得被移除人员名单（<em>leaverList</em>）。从 Authing 用户池中批量删除。提示删除成功的用户名（列表）。</p>

<p>如果有删除失败的（不确定原因引起），提示删除失败的用户名（列表），请管理员手动删除。</p>

<h4 id="用户-bot-提及消息">用户 @Bot 提及消息</h4>

<p>侦听 <code class="language-plaintext highlighter-rouge">message</code> 事件触发，如果非提及消息，或者消息中不包含手机号，则不处理。</p>

<p>检查用户是否存在，如果存在，修改绑定的手机号为用户输入的（可能出现重复手机号绑定失败）；如果用户不存在注册一个新用户。</p>

<p>如果绑定成功，发送消息提示。</p>

<h4 id="实现-1">实现</h4>

<p>代码位于 POC 项目 <code class="language-plaintext highlighter-rouge">upstream</code> 目录。</p>

<p>首先在 Bot 启动时，进行一遍群成员的检查：</p>

<p><img src="/assets/2022/01-authing-wechaty-intergration/1.webp" alt="mermaid" /></p>

<p>同时还侦听了两个 Wechaty 事件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">room-join</code>：管理员邀请用户加入群组（人为操作）</li>
  <li><code class="language-plaintext highlighter-rouge">room-leave</code>：管理员踢出群聊用户（人为操作）</li>
</ul>

<p><img src="/assets/2022/01-authing-wechaty-intergration/2.webp" alt="mermaid" /></p>

<h4 id="代码之外">代码之外</h4>

<p>当微信用户绑定到 Authing 用户池之后，还可以做些什么呢？比如同步企业成员信息到飞书，连接到各种 SSO 单点登录应用等。发挥想象力的时间到了，改变生产力，或许并不是那么遥不可及的事情。</p>

<h3 id="以-authing-用户作为上游-wechaty-用户作为下游">以 Authing 用户作为上游， Wechaty 用户作为下游</h3>

<p>用户数据来源也可能是同步中心里来自飞书或其他身份源的用户数据。<strong><em>其中有一步，在 Authing 用户池中添加新用户后，要求用户主动添加 Bot 为好友，必须。</em></strong></p>

<p>在 Bot 启动时，检查微信中是否存在全员群，如果没有，就创建一个（但如果企业成员数量不够 3 个，不能创建群聊的时候，机器人就会等主动添加的好友）。全员群存在之后，就开始定时任务检查是否有离职成员需要踢出群聊，以及新入职的成员邀请加入群聊了。</p>

<p><img src="/assets/2022/01-authing-wechaty-intergration/3.webp" alt="mermaid" /></p>

<p>其中，关联 Authing 用户和 Wechaty 联系人的方式也很简单。就是通过好友请求或者消息，发送手机号码，检查 Authing 用户池中是否存在。</p>

<p><img src="/assets/2022/01-authing-wechaty-intergration/4.webp" alt="mermaid" /></p>

<h3 id="扩展-wechaty-authing-插件去实现更复杂的业务">扩展 wechaty-authing 插件去实现更复杂的业务</h3>

<h4 id="扩展-authing-sdk-的使用">扩展 Authing SDK 的使用</h4>

<p><code class="language-plaintext highlighter-rouge">wechaty-authing</code> 提供了 protected 的 client 实例（对应着 authing sdk 里的 <code class="language-plaintext highlighter-rouge">ManagementClient</code>）。</p>

<p>所以可以参考 Authing 官方的文档进行深度开发。示例：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ExtendedWechatyAuthing</span> <span class="kd">extends</span> <span class="nx">WechatyAuthing</span> <span class="p">{</span>
  <span class="k">async</span> <span class="nx">totalUsers</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">totalCount</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">list</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">totalCount</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>参考文档： <a href="https://docs.authing.cn/v2/reference/sdk-for-node/management/">https://docs.authing.cn/v2/reference/sdk-for-node/management/</a></p>

<h4 id="扩展-wechaty-插件">扩展 Wechaty 插件</h4>

<p>同时开可以封装一些 Wechaty 插件功能。示例：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ExtendedWechatyAuthing</span> <span class="kd">extends</span> <span class="nx">WechatyAuthing</span> <span class="p">{</span>
  <span class="nx">plugin</span><span class="p">():</span> <span class="nx">WechatyPlugin</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nx">bot</span><span class="p">:</span> <span class="nx">Wechaty</span><span class="p">):</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">totalCount</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">list</span><span class="p">();</span>
        <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">total users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">totalCount</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">authing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtendedWechatyAuthing</span><span class="p">({</span>
  <span class="na">userPoolId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTHING_USER_POOL_ID</span><span class="p">,</span>
  <span class="na">secret</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTHING_USER_POOL_SECRET</span>
<span class="p">});</span>
<span class="kd">const</span> <span class="nx">bot</span> <span class="o">=</span> <span class="nx">createBot</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">WECHATY_PADLOCAL_TOKEN</span><span class="p">);</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">authing</span><span class="p">.</span><span class="nx">plugin</span><span class="p">());</span>
</code></pre></div></div>

<p>更多关于 Wechaty 插件的使用及开发，可以访问： <a href="https://wechaty.js.org/docs/using-plugin-with-wechaty/overview">https://wechaty.js.org/docs/using-plugin-with-wechaty/overview</a></p>

<hr />

<h3 id="注意事项">注意事项</h3>

<h3 id="微信限制">微信限制</h3>

<ul>
  <li>微信好友上限： 5000 人 <a href="https://kf.qq.com/faq/161223IrAjUn161223riUzaa.html">https://kf.qq.com/faq/161223IrAjUn161223riUzaa.html</a></li>
  <li>主动添加好友： 每日 30 次请求上限</li>
  <li>被动添加好友： 每日 180 次请求上限</li>
  <li>邀请加群： <a href="https://kf.qq.com/faq/161223uIfIre161223aUrmqU.html">https://kf.qq.com/faq/161223uIfIre161223aUrmqU.html</a>
    <ul>
      <li>超过 40 人群需要对方同意</li>
      <li>超过 100 人群需要对方开通微信支付（实名、绑卡）</li>
      <li>普通群人数上限 500</li>
    </ul>
  </li>
</ul>

<h3 id="wechaty-contact-唯一-id-说明">Wechaty Contact 唯一 ID 说明</h3>

<p>目前已知的 id 格式：</p>

<ul>
  <li>外部
    <ul>
      <li><code class="language-plaintext highlighter-rouge">$search$-weixin</code></li>
      <li><code class="language-plaintext highlighter-rouge">$search$-13212341234</code></li>
      <li><code class="language-plaintext highlighter-rouge">weixin</code> / <code class="language-plaintext highlighter-rouge">wxid_xxxx</code></li>
    </ul>
  </li>
  <li>Payload 内部
    <ul>
      <li><code class="language-plaintext highlighter-rouge">$search$-</code> 非好友 <code class="language-plaintext highlighter-rouge">v3_xxxxx@stranger</code></li>
      <li><code class="language-plaintext highlighter-rouge">weixin</code> / <code class="language-plaintext highlighter-rouge">wxid_xxxx</code></li>
      <li>不知道是啥的。如 <code class="language-plaintext highlighter-rouge">qq1111</code> 但 weixin 字段为微信号 <code class="language-plaintext highlighter-rouge">xxxx</code></li>
    </ul>
  </li>
</ul>

<h3 id="wechaty-可能会出现的一些问题">Wechaty 可能会出现的一些问题</h3>

<h4 id="版本">版本</h4>

<p>Wechaty 1.x 版本与之前的版本差距，如类型声明、创建实例的方式，需要注意你使用的 <code class="language-plaintext highlighter-rouge">puppet</code> 支持什么版本。</p>

<h4 id="主动搜索">主动搜索</h4>

<p>有两种搜索方式，通过手机号和通过微信号：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">Friendship</span><span class="p">.</span><span class="nx">search</span><span class="p">({</span> <span class="na">phone</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">phone</span><span class="o">!</span> <span class="p">});</span>
<span class="kd">const</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">Friendship</span><span class="p">.</span><span class="nx">search</span><span class="p">({</span> <span class="na">weixin</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">externalId</span><span class="o">!</span> <span class="p">});</span>
</code></pre></div></div>

<p>获得的结果均无法获取到唯一 id：</p>

<pre><code class="language-plain">昵称：Willin，id： $search$-132XXXXXXXX
昵称：XXXX，id： $search$-186XXXXXXXX

昵称：Willin，id： $search$-weixinXXXX
昵称：XXX，id： $search$-weixinXXXX
</code></pre>

<p>解决：如果是好友，则可以从 contact.payload.id 中获得。</p>

<h4 id="异常请求失败">异常请求失败</h4>

<p>比如查找某个手机号或者微信号，填写的参数正确。 <code class="language-plaintext highlighter-rouge">Friendship.search</code> 经常出现：</p>

<pre><code class="language-plain">================================================================================

VError: [tid:e05dff73] request has been cancelled for reason: SERVER_ERROR: 2 UNKNOWN: [tid:e05dff73] wechat bad request error
    at Request._failAllPendingRequest (/Users/v0/Projects/Authing/wechaty-authing-poc/node_modules/padlocal-client-ts/src/Request.ts:334:15)
    at ClientDuplexStreamImpl.&lt;anonymous&gt; (/Users/v0/Projects/Authing/wechaty-authing-poc/node_modules/padlocal-client-ts/src/Request.ts:82:12)
    at ClientDuplexStreamImpl.emit (node:events:390:28)
    at ClientDuplexStreamImpl.emit (node:domain:475:12)
    at Object.onReceiveStatus (/Users/v0/Projects/Authing/wechaty-authing-poc/node_modules/@grpc/grpc-js/src/client.ts:673:18)
    at Object.onReceiveStatus (/Users/v0/Projects/Authing/wechaty-authing-poc/node_modules/@grpc/grpc-js/src/client-interceptors.ts:424:48)
    at /Users/v0/Projects/Authing/wechaty-authing-poc/node_modules/@grpc/grpc-js/src/call-stream.ts:323:24
    at processTicksAndRejections (node:internal/process/task_queues:78:11)
error Command failed with exit code 1.
</code></pre>

<h4 id="获取的信息不准确">获取的信息不准确</h4>

<p>如 <code class="language-plaintext highlighter-rouge">room.memberAll()</code>， 该方法有时能够获取完整群成员信息。有时只能返回 id 列表。</p>

<p>完整的数据应该是这样：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
  <span class="p">{</span>
    <span class="na">_events</span><span class="p">:</span> <span class="p">{},</span>
    <span class="na">_eventsCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">xxxx</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">payload</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">xxxx</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">gender</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">type</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Willin</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">avatar</span><span class="p">:</span>
        <span class="dl">'</span><span class="s1">https://wx.qlogo.cn/mmhead/ver_1/lY8XLaibGJAiajvtTPx5kdDs2T3qGToUm0mHFTYGRzcaVydJZwnibQKMNKDzv2WosXJu2aUU8lteT1R6FCKVK3PUg/0</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">alias</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
      <span class="na">weixin</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
      <span class="na">city</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lianyungang</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">friend</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">province</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jiangsu</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">signature</span><span class="p">:</span> <span class="dl">'</span><span class="s1">所有的出发  </span><span class="se">\n</span><span class="s1">都是为了回家</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">phone</span><span class="p">:</span> <span class="p">[]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">];</span>
</code></pre></div></div>

<p>有的时候会变成这样：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
  <span class="p">{</span>
    <span class="na">_events</span><span class="p">:</span> <span class="p">{},</span>
    <span class="na">_eventsCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">xxxx</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">];</span>
</code></pre></div></div>

<h2 id="refs">Refs</h2>

<ul>
  <li>Wechaty Authing 插件仓库： <a href="https://github.com/Authing/wechaty-authing">https://github.com/Authing/wechaty-authing</a></li>
  <li>基于该插件的 POC 示例代码仓库： <a href="https://github.com/Authing/wechaty-authing-poc">https://github.com/Authing/wechaty-authing-poc</a></li>
</ul>]]></content><author><name>willin</name></author><category term="project" /><category term="sso" /><category term="authing" /><category term="ecosystem" /><summary type="html"><![CDATA[用户故事]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/01-authing-wechaty-intergration/2.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/01-authing-wechaty-intergration/2.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2022寒假-王天睿-JuziBot项目开发-期中报告-智能信息助理</title><link href="https://wechaty.js.org/2022/01/18/begin-intern-juzibot-report/" rel="alternate" type="text/html" title="2022寒假-王天睿-JuziBot项目开发-期中报告-智能信息助理" /><published>2022-01-18T00:00:00+00:00</published><updated>2022-01-18T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/01/18/begin-intern-juzibot-report</id><content type="html" xml:base="https://wechaty.js.org/2022/01/18/begin-intern-juzibot-report/"><![CDATA[<h2 id="2022寒假-王天睿-juzibot项目开发-期中报告-智能信息助理">2022寒假-王天睿-JuziBot项目开发-期中报告-智能信息助理</h2>

<h3 id="项目参与人">项目参与人</h3>

<ul>
  <li>导师：段清华</li>
  <li>学生：王天睿</li>
</ul>

<h3 id="项目目标">项目目标</h3>

<p>Juzibot 智能的信息助理 ，“小橘子”让您的生活更加高效 ！</p>

<h3 id="主要功能">主要功能</h3>

<ol>
  <li>备忘录(已有)
    <ul>
      <li>直接输入的文本、转发的文本</li>
      <li>语音输入、图片、视频、链接存储等多媒体信息</li>
      <li>输入文本中包含标签符号</li>
    </ul>
  </li>
  <li>TODO列表(已有）</li>
  <li>搜索指令(部分)</li>
  <li>其他指令(待完善)
    <ul>
      <li>例如
        <ol>
          <li>打开web/小程序管理界面</li>
          <li>群文件</li>
          <li>我的文件</li>
        </ol>
      </li>
    </ul>
  </li>
</ol>

<h3 id="项目计划">项目计划</h3>

<ol>
  <li>01/13-01/17 : 成功运行dingdong bot，运行juzibot 初步了解juzibot 模块 并学习nodejs</li>
  <li>01/18-01/25 : 开始根据现有功能书写测试用例，同时深入了解juzibot对应模块功能</li>
  <li>01/26-02/11 : 现有功能的完善与测试用例的持续编写</li>
  <li>02/12- : 集成测试与其他功能开发</li>
</ol>

<h3 id="项目进展">项目进展</h3>

<table>
  <thead>
    <tr>
      <th>时间</th>
      <th>重点工作</th>
      <th>关键进展</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>01/13</td>
      <td>学习 wechaty；跑通getting started 项目</td>
      <td>成功部署dingdong bot到服務器</td>
    </tr>
    <tr>
      <td>01/14</td>
      <td>使用juzibot 并初步学习nodejs</td>
      <td>成功在服务器上跑通并可以实现交互</td>
    </tr>
    <tr>
      <td>01/15</td>
      <td>继续学习nodejs 简单修改juzibot自动回复代码</td>
      <td>对Juzibot 有了大体的认识  简单修改代码实现关键词回复对应的语句</td>
    </tr>
    <tr>
      <td>01/18</td>
      <td>使用jekyll 完整的尝试一次提交pr</td>
      <td>谷歌了报错问题，并在段清华老师和同事的帮助下，解决了问题完成提交</td>
    </tr>
    <tr>
      <td>01/19-22</td>
      <td>使用mocha 初步完成模块测试</td>
      <td><a href="https://github.com/deepdialog/xiaojuzi/commits/master">Link</a></td>
    </tr>
    <tr>
      <td>01/24-28</td>
      <td>修改代码 完善更多模块,修改完善匹配规则</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="模块测试列表">模块测试列表</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />docx转换为文本</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />文件管理</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />图片转换为句子（本地REST）</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />对象存储</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />图片中对象识别（本地REST）</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />PDF转换文本</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />网页截图（本地REST）</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />搜索文本/文件</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />txt文本</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />文本到向量（本地REST）</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />待办事项</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />URL保存到PDF</li>
</ul>

<h3 id="第一次答辩">第一次答辩</h3>

<h4 id="视频">视频</h4>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/Z2VGME2K1Oo" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h4 id="答辩ppt">答辩PPT</h4>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="/assets/js/viewer-js/#/assets/2022/01-begin-intern-juzibot-report/01.pdf" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="项目链接">项目链接</h3>

<ul>
  <li>
    <p>项目链接：<a href="https://github.com/tianrking/xiaojuzi">https://github.com/tianrking/xiaojuzi</a></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>联系方式：Telegram: @qozob</td>
          <td>Email: me@w0x7ce.eu</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<blockquote>
  <p>Author: <a href="https://github.com/tianrking">@tianrking</a>
Code: <a href="https://github.com/tianrking/xiaojuzi">@tianrking/juzibot</a></p>
</blockquote>]]></content><author><name>tianrking</name></author><category term="article" /><category term="juzibot" /><summary type="html"><![CDATA[2022寒假-王天睿-JuziBot项目开发-期中报告-智能信息助理]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/01-begin-intern-juzibot-report/cover.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/01-begin-intern-juzibot-report/cover.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2022-基于5G平台开发puppet模块接入wechaty</title><link href="https://wechaty.js.org/2022/01/18/monthly-wechaty-puppet-walnut-report/" rel="alternate" type="text/html" title="2022-基于5G平台开发puppet模块接入wechaty" /><published>2022-01-18T00:00:00+00:00</published><updated>2022-01-18T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/01/18/monthly-wechaty-puppet-walnut-report</id><content type="html" xml:base="https://wechaty.js.org/2022/01/18/monthly-wechaty-puppet-walnut-report/"><![CDATA[<h2 id="基于-5g-平台开发-puppet-模块接入-wechaty">基于 5G 平台开发 puppet 模块接入 wechaty</h2>

<ul>
  <li>项目名称：基于5G消息的 Wechaty Puppet 模块的设计与实现</li>
  <li>学生：鲍耀龙</li>
  <li>导师：苏畅</li>
  <li>项目介绍：<a href="https://github.com/juzibot/intern/issues/1">https://github.com/juzibot/intern/issues/1</a></li>
  <li>代码地址：<a href="https://github.com/wechaty/puppet-walnut">https://github.com/wechaty/puppet-walnut</a></li>
</ul>

<h3 id="背景介绍">背景介绍</h3>

<ul>
  <li>Wechaty 社区目前已经支持微信、Whatsapp、企业微信、飞书等常见流行即时通讯工具，并且能够通过多语言 SDK （比如 Python Wechaty） 进行调用。</li>
  <li><a href="https://wechaty.js.org/2021/03/27/rcs-messaging-chatbot/">5G Chatbot (RCS)</a> 是近期中国电信运营商基于 5G 的消息战略落地平台，未来的 5G 手机将会内置 RCS 消息的处理能力。</li>
  <li><a href="https://www.5g-msg.com/#/">硬核桃社区</a> 的 <a href="https://wechaty.js.org/2021/03/27/rcs-messaging-chatbot/">电信运营商商5G Chatbot</a> 平台。</li>
</ul>

<h3 id="目标计划">目标计划</h3>

<ul>
  <li>基于 5G 平台的开放 api 进行封装，实现简单的<code class="language-plaintext highlighter-rouge">ding-dong-bot</code>。</li>
  <li>丰富 5G 的消息模式，实现支持富文本、文件、css等多样消息格式的 puppet。</li>
</ul>

<h3 id="项目进展">项目进展</h3>

<ul>
  <li>完善 walnut 仓库的 README 和 getting-started。</li>
  <li>完善对于 wechaty contact 和 message 部分 api 的支持。</li>
</ul>

<h3 id="contact-api-支持">Contact Api 支持</h3>

<ul>
  <li>
    <h4 id="properties"><a href="https://wechaty.js.org/docs/api/contact#properties">Properties</a></h4>

    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Description</th>
          <th>Support</th>
          <th>Details</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td><code class="language-plaintext highlighter-rouge">string</code></td>
          <td>Get Contact id. This function is depending on the Puppet Implementation, see <a href="https://github.com/wechaty/wechaty/wiki/Puppet#3-puppet-compatible-table">puppet-compatible-table</a></td>
          <td>✅</td>
          <td>Phone number</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <h4 id="instance-methods"><a href="https://wechaty.js.org/docs/api/contact#instance-methods">Instance Methods</a></h4>

    <table>
      <thead>
        <tr>
          <th>Instance Methods</th>
          <th>Return type</th>
          <th>Support</th>
          <th>Details</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>say(text Or Contact Or File)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td>⚠Contact not Support</td>
        </tr>
        <tr>
          <td>name()</td>
          <td><code class="language-plaintext highlighter-rouge">String</code></td>
          <td>✅</td>
          <td>Phone number</td>
        </tr>
        <tr>
          <td>alias(newAlias)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>friend()</td>
          <td><code class="language-plaintext highlighter-rouge">Boolean or null</code></td>
          <td>✅</td>
          <td>True</td>
        </tr>
        <tr>
          <td>type()</td>
          <td><code class="language-plaintext highlighter-rouge">ContactType.Unknown or ContactType.Personal or ContactType.Official</code></td>
          <td>✅</td>
          <td>ContactType.Personal</td>
        </tr>
        <tr>
          <td>gender()</td>
          <td><code class="language-plaintext highlighter-rouge">ContactGender.Unknown or ContactGender.Male or ContactGender.Female</code></td>
          <td>✅</td>
          <td>ContactGender.Unknown</td>
        </tr>
        <tr>
          <td>province()</td>
          <td><code class="language-plaintext highlighter-rouge">String or null</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>city()</td>
          <td><code class="language-plaintext highlighter-rouge">String or null</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>avatar()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td>Default avatar</td>
        </tr>
        <tr>
          <td>sync()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>self()</td>
          <td><code class="language-plaintext highlighter-rouge">Boolean</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>

    <blockquote>
      <p>Default avatar 👉 <a href="https://raw.githubusercontent.com/wechaty/puppet-walnut/main/docs/images/avatar.webp">https://raw.githubusercontent.com/wechaty/puppet-walnut/main/docs/images/avatar.webp</a></p>
    </blockquote>
  </li>
  <li>
    <h4 id="static-methods"><a href="https://wechaty.js.org/docs/api/contact#static-methods">Static Methods</a></h4>

    <table>
      <thead>
        <tr>
          <th>Static Methods</th>
          <th>Return Type</th>
          <th>Support</th>
          <th>Detail</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>find(query)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise &lt;Contact | null&gt;</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>findAll(Query Arguements)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise &lt;Contact []&gt;</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="message-api-支持">Message Api 支持</h3>

<ul>
  <li>
    <h4 id="instance-methods-1"><a href="https://wechaty.js.org/docs/api/message#instance-methods">Instance Methods</a></h4>

    <table>
      <thead>
        <tr>
          <th>Instance methods</th>
          <th>Return type</th>
          <th>Support</th>
          <th>Detail</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>from()</td>
          <td><code class="language-plaintext highlighter-rouge">Contact</code> or <code class="language-plaintext highlighter-rouge">null</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>to()</td>
          <td><code class="language-plaintext highlighter-rouge">Contact</code> or <code class="language-plaintext highlighter-rouge">null</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>room()</td>
          <td><code class="language-plaintext highlighter-rouge">Room</code> or <code class="language-plaintext highlighter-rouge">null</code></td>
          <td>✅</td>
          <td>null</td>
        </tr>
        <tr>
          <td>text()</td>
          <td><code class="language-plaintext highlighter-rouge">string</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>say(text Or Contact Or File)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td>⚠Contact not Support</td>
        </tr>
        <tr>
          <td>type()</td>
          <td><code class="language-plaintext highlighter-rouge">MessageType</code></td>
          <td>✅</td>
          <td>Message.Text</td>
        </tr>
        <tr>
          <td>self()</td>
          <td><code class="language-plaintext highlighter-rouge">boolean</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>mention()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>mentionSelf()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>forward(to)</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>date()</td>
          <td><code class="language-plaintext highlighter-rouge">Date</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>age()</td>
          <td><code class="language-plaintext highlighter-rouge">Number</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>toFileBox()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>toContact()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>❌</td>
          <td> </td>
        </tr>
        <tr>
          <td>toUrlLink()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <h4 id="static-method"><a href="https://wechaty.js.org/docs/api/message#static-method">Static Method</a></h4>

    <table>
      <thead>
        <tr>
          <th>Static Methods</th>
          <th>Return type</th>
          <th>Support</th>
          <th>Detail</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>find()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
        <tr>
          <td>findAll()</td>
          <td><code class="language-plaintext highlighter-rouge">Promise</code></td>
          <td>✅</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="视频展示">视频展示</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/K5CIaL6x83k" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="答辩报告">答辩报告</h3>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="/assets/2022/01-monthly-wechaty-puppet-walnut-report/monthly-wechaty-puppet-walnut-report" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h3 id="计划安排">计划安排</h3>

<ul>
  <li>完成图片和地理位置卡片消息的实现。</li>
  <li>封装和抽象消息模块的数据结构。</li>
  <li>优化项目结构，进行项目部署和稳定性测试。</li>
</ul>

<blockquote>
  <p>Author: <a href="https://github.com/fabian4">@fabian</a></p>
</blockquote>]]></content><author><name>fabian</name></author><category term="project" /><category term="5g" /><category term="puppet-walnut" /><category term="chatbot" /><category term="ecosystem" /><category term="plan" /><summary type="html"><![CDATA[基于 5G 平台开发 puppet 模块接入 wechaty]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/01-monthly-wechaty-puppet-walnut-report/puppet-walnut.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/01-monthly-wechaty-puppet-walnut-report/puppet-walnut.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基于Wechaty的个人助理，++生活效率&amp;amp;&amp;amp;有效对抗内卷</title><link href="https://wechaty.js.org/2022/01/16/wechaty-assistant-bot-opensource/" rel="alternate" type="text/html" title="基于Wechaty的个人助理，++生活效率&amp;amp;&amp;amp;有效对抗内卷" /><published>2022-01-16T00:00:00+00:00</published><updated>2022-01-16T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/01/16/wechaty-assistant-bot-opensource</id><content type="html" xml:base="https://wechaty.js.org/2022/01/16/wechaty-assistant-bot-opensource/"><![CDATA[<h2 id="项目地址">项目地址</h2>

<p><a href="https://github.com/yzh1255245824/wechat-bot-padlocal">wechaty-assistant</a></p>

<h2 id="一前言">一、前言</h2>

<p>由于常年穿梭于诸多小众网盘的qq群，我接触到了社交软件机器人这个概念。初次接触，便觉得甚是有趣，因而在一番检索之后，寻访到了<code class="language-plaintext highlighter-rouge">wechaty</code>这一宝地。</p>

<p>起初只是想做一个在微信群内和群友聊天水群的机器人，后来发现一些在酷安上费尽心机找到的宝藏软件的部分功能，可以简化移植到微信上，例如<code class="language-plaintext highlighter-rouge">密码键盘</code>这一功能。还有<code class="language-plaintext highlighter-rouge">定时消息</code>这种用处颇大的功能，此前只能提前编辑好消息，然后挑灯夜战、枕戈待旦，时机一到就手动点击发送，而现在借助<code class="language-plaintext highlighter-rouge">wechaty</code>，妈妈再也不用担心过年的时候12:00要发送的拜年请求过多、双十一也不必再纠结是先给女友发送恋爱纪念日快乐还是先去京东下单(太棒了！！)。</p>

<p>本项目借助<code class="language-plaintext highlighter-rouge">padlocal</code>作为puppet-provider，集成了个人常用的API服务商接口，同时接入了<code class="language-plaintext highlighter-rouge">微信对话开放平台</code>，你可以利用内嵌的小功能替代平时在网页中使用的在线小工具，也可以在凌晨四点给卷王们发送“我还在学”，诸多功能可点击项目地址下方链接体验。</p>

<p>再次特别致谢<code class="language-plaintext highlighter-rouge">wechaty</code>社区一众开发者们的辛勤付出，感谢你们的创造。</p>

<h2 id="二主要功能">二、主要功能</h2>

<h3 id="21-私聊消息处理关键词回复包括">2.1 私聊消息处理：关键词回复，包括</h3>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/menu.webp" alt="people-message" /></p>

<p>在线实时数据获取服务由API服务商提供</p>

<p>毒鸡汤
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/poisonsoup.webp" alt="IMG_20220115_210015.jpg" /></p>

<p>神回复
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/godreply.webp" alt="image.png" /></p>

<p>每日英语
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/oneen.webp" alt="IMG_20220115_205958.jpg" /></p>

<p>全网热点
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/networkhots.webp" alt="image.png" /></p>

<p>城市天气
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/weather.webp" alt="IMG_20220115_210107.jpg" /></p>

<p>客服
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/customerservice.webp" alt="image.png" /></p>

<p>文本处理功能由本地编写算法处理</p>

<p>英文字符串转大/小写
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/toupper.webp" alt="image.png" /></p>

<p>rgb<code class="language-plaintext highlighter-rouge">&lt;=&gt;</code>hex
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/rgbtohex.webp" alt="image.png" /></p>

<h3 id="22-群管理">2.2 群管理</h3>

<p>通过私聊的快捷指令自动拉人入群
<code class="language-plaintext highlighter-rouge">踢@用户名</code>快捷指令踢人</p>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/kicksb.webp" alt="image.png" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/* 特权消息 */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">sender</span> <span class="o">===</span> <span class="nx">config</span><span class="p">.</span><span class="nx">MYSELF</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 踢人功能  群里发送  踢@某某某  即可</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">content</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">踢@</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">//如果是机器人好友且昵称是自己的大号昵称  才执行踢人操作</span>
        <span class="c1">// edit at 0109：备注如果无法获取，等一段时间数据刷新即可。踢人要管理员权限</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">contact</span><span class="p">.</span><span class="nx">friend</span><span class="p">())</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="nx">delName</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">踢@</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">踢出</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">delName</span><span class="p">);</span> <span class="c1">// debug</span>
          <span class="kd">const</span> <span class="nx">delContact</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">room</span><span class="p">.</span><span class="nx">member</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">delName</span> <span class="p">});</span>
          <span class="k">await</span> <span class="nx">room</span><span class="p">.</span><span class="nx">del</span><span class="p">(</span><span class="nx">delContact</span><span class="p">);</span>
          <span class="k">await</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">say</span><span class="p">(</span><span class="nx">delName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">已被移除群聊。且聊且珍惜啊！</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>检测群内非法<code class="language-plaintext highlighter-rouge">url</code>并<code class="language-plaintext highlighter-rouge">@</code>提醒对方</p>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/listenurl.webp" alt="image.png" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">urlReg</span> <span class="o">=</span>
  <span class="sr">/</span><span class="se">(</span><span class="sr">http</span><span class="se">(</span><span class="sr">s</span><span class="se">)?</span><span class="sr">:</span><span class="se">\/\/)?[</span><span class="sr">a-zA-Z0-9</span><span class="se">][</span><span class="sr">-a-zA-Z0-9</span><span class="se">]{0,62}(\.[</span><span class="sr">a-zA-Z0-9</span><span class="se">][</span><span class="sr">-a-zA-Z0-9</span><span class="se">]{0,62})</span><span class="sr">+</span><span class="se">(</span><span class="sr">:</span><span class="se">[</span><span class="sr">0-9</span><span class="se">]{1,5})?[</span><span class="sr">-a-zA-Z0-9()@:%_</span><span class="se">\\\+\.</span><span class="sr">~#?&amp;</span><span class="se">//</span><span class="sr">=</span><span class="se">]</span><span class="sr">*$/g</span><span class="p">;</span>  <span class="c1">// 匹配url的正则表达式(实际情况下，url发送者多数不会添加http(s)头)</span>

    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">urlReg</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">text</span><span class="p">()))</span> <span class="p">{</span>
      <span class="nx">urlReg</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 索引重置</span>

      <span class="kd">const</span> <span class="nx">testUrl</span> <span class="o">=</span> <span class="nx">urlReg</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>

      <span class="kd">const</span> <span class="nx">valid</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">superagent</span><span class="p">.</span><span class="nx">checkUrl</span><span class="p">(</span><span class="nx">testUrl</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">valid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">room</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">room</span><span class="p">();</span>
        <span class="c1">// const master = await room.member(config.BOTNAME);</span>
        <span class="k">await</span> <span class="nx">room</span><span class="p">.</span><span class="nx">say</span><span class="p">(</span>
          <span class="s2">`@</span><span class="p">${</span><span class="nx">msg</span>
            <span class="p">.</span><span class="k">from</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">name</span><span class="p">()}</span><span class="s2"> 为了群主与众管理员的法律安全，本群禁止发送不明链接!!!`</span>
        <span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">链接不合法</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// debug</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="23-自动处理好友请求">2.3 自动处理好友请求</h3>

<ul>
  <li>自动通过好友请求</li>
  <li>可限制通过填写指定验证消息的好友，避免陌生人添加好友</li>
</ul>

<h3 id="24-智能对话接入微信对话开放平台">2.4 智能对话（接入微信对话开放平台）</h3>

<p>未被关键词捕获的消息将由<strong>训练好的AI</strong>智能回复</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">WXAI_TOKEN</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your token</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 微信对话开放平台token</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">WXAI</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://openai.weixin.qq.com/openapi/</span><span class="dl">"</span><span class="p">;</span>  <span class="c1">// 微信对话开放平台</span>

<span class="cm">/**
 * @function 获取API签名，2小时过期
 * @returns 签名
 * @tips 改为轮询
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">getSignature</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span><span class="nx">signature</span><span class="p">}</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">WXAI</span><span class="p">}</span><span class="s2">sign/</span><span class="p">${</span><span class="nx">WXAI_TOKEN</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">userid</span><span class="p">:</span> <span class="dl">'</span><span class="s1">anything</span><span class="dl">'</span> <span class="c1">// 这里可以是任意值</span>
  <span class="p">})).</span><span class="nx">data</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">signature</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @function 调用AI接口，获取答案
 * @param {签名} signature
 * @param {用户id} userid 
 * @param {接收到的文本} text 
 * @returns AI给出的答案
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">getAnswer</span><span class="p">(</span><span class="nx">signature</span><span class="p">,</span> <span class="nx">userid</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span><span class="nx">answer</span><span class="p">}</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">WXAI</span><span class="p">}</span><span class="s2">aibot/</span><span class="p">${</span><span class="nx">WXAI_TOKEN</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">signature</span><span class="p">:</span> <span class="nx">signature</span><span class="p">,</span>
      <span class="na">userid</span><span class="p">:</span> <span class="nx">userid</span><span class="p">,</span>
      <span class="na">query</span><span class="p">:</span> <span class="nx">text</span><span class="p">,</span>
  <span class="p">})).</span><span class="nx">data</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>微信对话开放平台详细配置可去<code class="language-plaintext highlighter-rouge">四</code>中链接出查阅</p>

<h3 id="25-设置定时任务可循环可单次">2.5 设置定时任务(可循环、可单次）</h3>

<p>定时发送群消息，登录时任务开始执行</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="cm">/**
    * @func 8点半定时给指定群发送消息
    */</span>
   <span class="k">async</span> <span class="kd">function</span> <span class="nx">rolling</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">schedule</span><span class="p">.</span><span class="nx">setSchedule</span><span class="p">(</span> <span class="c1">// node-schedule使用方法可见官方文档,此处语法不唯一</span>
       <span class="p">{</span>
         <span class="na">hour</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
         <span class="na">minute</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
       <span class="p">},</span>
   
       <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
         <span class="kd">const</span> <span class="nx">room</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">Room</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
           <span class="na">topic</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">WEBROOM</span><span class="p">,</span>
         <span class="p">});</span>
         <span class="kd">const</span> <span class="nx">today</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="dl">"</span><span class="s2">MM月DD日</span><span class="dl">"</span><span class="p">);</span>
         <span class="kd">let</span> <span class="nx">poison</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">superagent</span><span class="p">.</span><span class="nx">getSoup</span><span class="p">();</span> <span class="c1">//毒鸡汤</span>
         <span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">`今天是</span><span class="p">${</span><span class="nx">today</span><span class="p">}</span><span class="s2">,你学废了吗?</span><span class="p">${</span><span class="nx">poison</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
         <span class="k">await</span> <span class="nx">room</span><span class="p">.</span><span class="nx">say</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
       <span class="p">}</span>
     <span class="p">);</span>
   <span class="p">}</span>
</code></pre></div></div>

<p>定时给个人发送消息</p>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/schedule.webp" alt="image.png" /></p>

<p><code class="language-plaintext highlighter-rouge">2022年1月14日4点0分0秒</code>向备注为<code class="language-plaintext highlighter-rouge">樊庆元</code>的联系人发送<code class="language-plaintext highlighter-rouge">“我刚学完，早安”</code>
让卷王们感受恐惧吧！！！</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">if</span> <span class="p">((</span><span class="k">await</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">alias</span><span class="p">())</span> <span class="o">===</span> <span class="nx">config</span><span class="p">.</span><span class="nx">MYSELF</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="nx">content</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">定时</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">定时</span><span class="dl">"</span><span class="p">);</span>
         <span class="kd">const</span> <span class="nx">remain</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">定时</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span> <span class="c1">// 分割指令文本</span>
   
         <span class="kd">const</span> <span class="nx">timeAndStr</span> <span class="o">=</span> <span class="nx">remain</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 时间和消息内容</span>
   
         <span class="kd">const</span> <span class="nx">timeStr</span> <span class="o">=</span> <span class="nx">timeAndStr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 精确时间</span>
         <span class="kd">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="nx">timeAndStr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// 消息文本</span>
         <span class="kd">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">timeAndStr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span> <span class="c1">// 收信人备注</span>
         <span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">schedule</span><span class="p">.</span><span class="nx">scheduleMsg</span><span class="p">(</span><span class="nx">timeStr</span><span class="p">);</span>
   
         <span class="nx">schedule</span><span class="p">.</span><span class="nx">setSchedule</span><span class="p">(</span>
           <span class="nx">date</span><span class="p">,</span>
           <span class="k">async</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">txt</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
             <span class="kd">const</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">Contact</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">alias</span><span class="p">:</span> <span class="nx">target</span> <span class="p">});</span> <span class="c1">// 收信人</span>
             <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`向</span><span class="p">${</span><span class="nx">contact</span><span class="p">.</span><span class="nx">name</span><span class="p">()}</span><span class="s2">发送'</span><span class="p">${</span><span class="nx">txt</span><span class="p">}</span><span class="s2">'`</span><span class="p">);</span>
             <span class="nx">contact</span><span class="p">.</span><span class="nx">say</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span>
           <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">txt</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="c1">// 通过bind()可向内部函数挂载参数</span>
         <span class="p">);</span>
         <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
       <span class="p">}</span>
   <span class="p">}</span>
</code></pre></div></div>

<h3 id="26-密码簿">2.6 密码簿</h3>

<p>该功能可用于记录<strong>常用的冗长文本</strong>，例如身份证号、银行卡号、购物时的好评模板等等。</p>

<p>通过指令<code class="language-plaintext highlighter-rouge">map key value</code>可记录标签为<code class="language-plaintext highlighter-rouge">key</code>，内容为<code class="language-plaintext highlighter-rouge">value</code>的密码（在<code class="language-plaintext highlighter-rouge">password</code>目录下生成文件）</p>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/map.webp" alt="image.png" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">content</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">map</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// map key value</span>
      <span class="kd">let</span> <span class="nx">command</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">map</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span> 
      <span class="nx">command</span> <span class="o">=</span> <span class="nx">command</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">command</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
      <span class="nx">key</span> <span class="o">=</span> <span class="nx">cipher</span><span class="p">.</span><span class="nx">md5</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">// 文件名加密</span>
      <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">command</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
      <span class="nx">value</span> <span class="o">=</span> <span class="nx">cipher</span><span class="p">.</span><span class="nx">aes128</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 文件加密</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">writefile:  </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">value</span><span class="p">);</span>
      <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/../password</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">),</span> <span class="nx">value</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">writeFileErr: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
      <span class="p">});</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>通过指令get key可以获取标签为key的密码</p>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/get.webp" alt="image.png" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">content</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// get key</span>
      <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span> 
      <span class="nx">key</span> <span class="o">=</span> <span class="nx">cipher</span><span class="p">.</span><span class="nx">md5</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
      <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/../password</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">),</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">readFileErr: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">detail</span> <span class="o">=</span> <span class="nx">cipher</span><span class="p">.</span><span class="nx">unaes128</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">readfile:  </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">detail</span><span class="p">);</span> <span class="c1">// 文件解密</span>
        <span class="nx">msg</span><span class="p">.</span><span class="nx">say</span><span class="p">(</span><span class="nx">detail</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>文件加密</p>

<p>文件名通过<code class="language-plaintext highlighter-rouge">md5</code>算法比对</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">const</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">crypto</span><span class="dl">"</span><span class="p">);</span>
   
   <span class="cm">/**
    * @func 文件名加密
    * @param {明文} str 
    * @returns 加密后的字符串
    */</span>
   <span class="kd">const</span> <span class="nx">md5</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="dl">"</span><span class="s2">md5</span><span class="dl">"</span><span class="p">);</span>
     <span class="nx">hash</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
     <span class="k">return</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="dl">"</span><span class="s2">hex</span><span class="dl">"</span><span class="p">);</span>
   <span class="p">};</span>
</code></pre></div></div>

<p>文件内容通过<code class="language-plaintext highlighter-rouge">aes-128-cbc</code>算法加密</p>

<p><img src="/assets/2022/01-wechaty-assistant-bot-opensource/encrypt1.webp" alt="image.png" />
<img src="/assets/2022/01-wechaty-assistant-bot-opensource/encrypt2.webp" alt="image.png" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="cm">/**
    * @func aes-128-cbc加密算法封装
    * @param {密钥} key 
    * @param {初始化向量} iv 
    * @param {明文} data 
    * @returns 
    */</span>
   <span class="kd">function</span> <span class="nx">encrypt</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
     <span class="kd">let</span> <span class="nx">cipher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createCipheriv</span><span class="p">(</span><span class="dl">"</span><span class="s2">aes-128-cbc</span><span class="dl">"</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">);</span>
     <span class="k">return</span> <span class="nx">cipher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">base64</span><span class="dl">"</span><span class="p">)</span> <span class="o">+</span> <span class="nx">cipher</span><span class="p">.</span><span class="nx">final</span><span class="p">(</span><span class="dl">"</span><span class="s2">base64</span><span class="dl">"</span><span class="p">);</span>
   <span class="p">}</span>
   
   <span class="cm">/**
    * @func aes-128-cbc解密算法封装
    * @param {密钥} key 
    * @param {初始化向量} iv 
    * @param {密文} data 
    * @returns 
    */</span>
   <span class="kd">function</span> <span class="nx">decrypt</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">,</span> <span class="nx">encrypted</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">encrypted</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">encrypted</span><span class="p">,</span> <span class="dl">"</span><span class="s2">base64</span><span class="dl">"</span><span class="p">);</span>
     <span class="kd">let</span> <span class="nx">decipher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipheriv</span><span class="p">(</span><span class="dl">"</span><span class="s2">aes-128-cbc</span><span class="dl">"</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">);</span>
     <span class="k">return</span> <span class="nx">decipher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">encrypted</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">)</span> <span class="o">+</span> <span class="nx">decipher</span><span class="p">.</span><span class="nx">final</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">);</span>
   <span class="p">}</span>
   
   <span class="cm">/**
    * @func 加密文件内容
    * @param {明文} data 
    * @returns 加密后的文件内容
    */</span> 
   <span class="kd">const</span> <span class="nx">aes128</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="o">=</span><span class="dl">"</span><span class="s2">123456789abcdefg</span><span class="dl">"</span><span class="p">,</span> <span class="nx">iv</span><span class="o">=</span><span class="dl">"</span><span class="s2">123456789abcdefg</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">encrypt</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
   <span class="p">};</span>
   
   <span class="cm">/**
    * @func 解密文件内容
    * @param {密钥} key 
    * @param {初始化向量} iv 
    * @param {密文} data 
    * @returns 
    */</span>
   <span class="kd">const</span> <span class="nx">unaes128</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="o">=</span><span class="dl">"</span><span class="s2">123456789abcdefg</span><span class="dl">"</span><span class="p">,</span> <span class="nx">iv</span><span class="o">=</span><span class="dl">"</span><span class="s2">123456789abcdefg</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">decrypt</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
   <span class="p">};</span>
</code></pre></div></div>

<h2 id="三目录结构">三、目录结构</h2>

<p><code class="language-plaintext highlighter-rouge">config</code>文件夹存放公共配置文件以及<code class="language-plaintext highlighter-rouge">superagent</code>请求相关配置</p>

<p><code class="language-plaintext highlighter-rouge">imgs</code>存放相关图片</p>

<p><code class="language-plaintext highlighter-rouge">listeners</code>存放机器人初始化后一系列事件处理(分模块)
<code class="language-plaintext highlighter-rouge">on-friendship.js</code>处理好友请求
<code class="language-plaintext highlighter-rouge">on-login.js</code>处理登录
<code class="language-plaintext highlighter-rouge">on-message.js</code>处理用户消息、群消息
<code class="language-plaintext highlighter-rouge">on-scan.js</code>处理登录二维码</p>

<p><code class="language-plaintext highlighter-rouge">schedule</code>对定时任务<code class="language-plaintext highlighter-rouge">node-schedule</code>库进行了封装</p>

<p><code class="language-plaintext highlighter-rouge">superagent</code>存放所有的数据请求、接口封装都在此</p>

<p><code class="language-plaintext highlighter-rouge">utils</code>公用方法的封装</p>

<p><code class="language-plaintext highlighter-rouge">app.js</code>入口文件</p>

<h2 id="四如何本地化">四、如何本地化</h2>

<p>需修改<code class="language-plaintext highlighter-rouge">config</code>配置，将里面的配置改为自己的。打开<code class="language-plaintext highlighter-rouge">config/index.js</code>文件， 操作如下：</p>

<p>官网注册账号</p>

<p>wechaty-puppet-padlocal供应商：<a href="http://pad-local.com/">http://pad-local.com/</a>
天行数据官网：<a href="https://tianapi.com/">https://www.tianapi.com/</a>
聚合数据官网：<a href="https://www.juhe.cn/">https://www.juhe.cn/</a>
微信对话开放平台：<a href="https://openai.weixin.qq.com/">https://openai.weixin.qq.com/</a></p>

<p>注册成功后，申请以下接口</p>

<p>天行数据
<a href="https://www.tianapi.com/apiview/62">每日英语一句话</a>
<a href="https://www.tianapi.com/apiview/39">神回复</a>
<a href="https://www.tianapi.com/apiview/223">全网热搜榜</a></p>

<p>聚合数据
<a href="https://www.juhe.cn/docs/api/id/73">天气预报</a></p>

<p>注册后请打开<code class="language-plaintext highlighter-rouge">config/index.js</code>，将顶部<code class="language-plaintext highlighter-rouge">PUPPET_TOKEN</code>、<code class="language-plaintext highlighter-rouge">TXAPI_TOKEN</code>、<code class="language-plaintext highlighter-rouge">JUHEAPI_TOKEN</code>、<code class="language-plaintext highlighter-rouge">WXAI_TOKEN</code>改为自己的即可</p>

<p>其他免费接口可随意申请，也可以自行更换API服务商。</p>

<h2 id="五运行">五、运行</h2>

<p>记得安装依赖</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cnpm <span class="nb">install</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cnpm start
</code></pre></div></div>

<p>终端会出现一个二维码，扫码登录即可。</p>

<p>若二维码显示的很诡异，无法扫描，请更换终端（去微软商店下载<code class="language-plaintext highlighter-rouge">Windows Terminal</code>）。</p>

<p>有问题可邮箱咨询 <code class="language-plaintext highlighter-rouge">01@yizhihang.club</code></p>]]></content><author><name>yzh1255245824</name></author><category term="article" /><category term="assistant" /><category term="wechat" /><category term="improve-efficiency" /><category term="against-involution" /><summary type="html"><![CDATA[项目地址]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/01-wechaty-assistant-bot-opensource/roll.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/01-wechaty-assistant-bot-opensource/roll.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>